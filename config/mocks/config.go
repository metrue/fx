// Code generated by MockGen. DO NOT EDIT.
// Source: ./config.go

// Package mock_config is a generated GoMock package.
package mock_config

import (
	gomock "github.com/golang/mock/gomock"
	config "github.com/metrue/fx/config"
	reflect "reflect"
)

// MockConfiger is a mock of Configer interface
type MockConfiger struct {
	ctrl     *gomock.Controller
	recorder *MockConfigerMockRecorder
}

// MockConfigerMockRecorder is the mock recorder for MockConfiger
type MockConfigerMockRecorder struct {
	mock *MockConfiger
}

// NewMockConfiger creates a new mock instance
func NewMockConfiger(ctrl *gomock.Controller) *MockConfiger {
	mock := &MockConfiger{ctrl: ctrl}
	mock.recorder = &MockConfigerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfiger) EXPECT() *MockConfigerMockRecorder {
	return m.recorder
}

// GetMachine mocks base method
func (m *MockConfiger) GetMachine(name string) (config.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachine", name)
	ret0, _ := ret[0].(config.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachine indicates an expected call of GetMachine
func (mr *MockConfigerMockRecorder) GetMachine(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachine", reflect.TypeOf((*MockConfiger)(nil).GetMachine), name)
}

// AddMachine mocks base method
func (m *MockConfiger) AddMachine(name string, host config.Host) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMachine", name, host)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMachine indicates an expected call of AddMachine
func (mr *MockConfigerMockRecorder) AddMachine(name, host interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMachine", reflect.TypeOf((*MockConfiger)(nil).AddMachine), name, host)
}

// RemoveHost mocks base method
func (m *MockConfiger) RemoveHost(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveHost", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveHost indicates an expected call of RemoveHost
func (mr *MockConfigerMockRecorder) RemoveHost(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveHost", reflect.TypeOf((*MockConfiger)(nil).RemoveHost), name)
}

// ListActiveMachines mocks base method
func (m *MockConfiger) ListActiveMachines() (map[string]config.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListActiveMachines")
	ret0, _ := ret[0].(map[string]config.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActiveMachines indicates an expected call of ListActiveMachines
func (mr *MockConfigerMockRecorder) ListActiveMachines() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActiveMachines", reflect.TypeOf((*MockConfiger)(nil).ListActiveMachines))
}

// ListMachines mocks base method
func (m *MockConfiger) ListMachines() (map[string]config.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMachines")
	ret0, _ := ret[0].(map[string]config.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMachines indicates an expected call of ListMachines
func (mr *MockConfigerMockRecorder) ListMachines() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMachines", reflect.TypeOf((*MockConfiger)(nil).ListMachines))
}

// EnableMachine mocks base method
func (m *MockConfiger) EnableMachine(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableMachine", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnableMachine indicates an expected call of EnableMachine
func (mr *MockConfigerMockRecorder) EnableMachine(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableMachine", reflect.TypeOf((*MockConfiger)(nil).EnableMachine), name)
}

// DisableMachine mocks base method
func (m *MockConfiger) DisableMachine(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableMachine", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisableMachine indicates an expected call of DisableMachine
func (mr *MockConfigerMockRecorder) DisableMachine(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableMachine", reflect.TypeOf((*MockConfiger)(nil).DisableMachine), name)
}

// UpdateProvisionedStatus mocks base method
func (m *MockConfiger) UpdateProvisionedStatus(name string, ok bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProvisionedStatus", name, ok)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProvisionedStatus indicates an expected call of UpdateProvisionedStatus
func (mr *MockConfigerMockRecorder) UpdateProvisionedStatus(name, ok interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProvisionedStatus", reflect.TypeOf((*MockConfiger)(nil).UpdateProvisionedStatus), name, ok)
}
