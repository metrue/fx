// Code generated by github.com/gobuffalo/packr. DO NOT EDIT.

package d

import "github.com/gobuffalo/packr"

// You can use the "packr clean" command to clean up this,
// and any other packr generated files.
func init() {
	_ = packr.PackJSONBytes("d", "Dockerfile", "\&#34;RlJPTSBtZXRydWUvZngtZC1iYXNlCgpDT1BZIC4gLgpFWFBPU0UgMzAwMApDTUQgWyJyZG1kIiwgIi12ZXJzaW9uPWVtYmVkZGVkX2h0dHBkIiwgImFwcCIsICItLXBvcnQiLCAiMzAwMCJd\&#34;")
	_ = packr.PackJSONBytes("d", "app.d", "\&#34;aW1wb3J0IHN0ZC5qc29uOwppbXBvcnQgYXJzZC5jZ2k7CmltcG9ydCBmeDsgCgp2b2lkIGhhbmRsZShDZ2kgY2dpKSAKewogICAgaWYgKGNnaS5yZXF1ZXN0TWV0aG9kID09IENnaS5SZXF1ZXN0TWV0aG9kLlBPU1QgJiYgY2dpLnBhdGhJbmZvID09ICIvIikKICAgIHsKICAgICAgICBhdXRvIGlucHV0ID0gcGFyc2VKU09OKGNnaS5wb3N0SnNvbik7CiAgICAgICAgYXV0byByZXN1bHQgPSBKU09OVmFsdWUoZXhlY3V0ZUZ4KGlucHV0KSk7CiAgICAgICAgY2dpLnNldFJlc3BvbnNlQ29udGVudFR5cGUoImFwcGxpY2F0aW9uL2pzb24iKTsKICAgICAgICBjZ2kud3JpdGUodG9KU09OKHJlc3VsdCkpOwogICAgfQp9CgptaXhpbiBHZW5lcmljTWFpbiFoYW5kbGU7\&#34;")
	_ = packr.PackJSONBytes("d", "arsd/cgi.d", "\&#34;Ly8gRklYTUU6IGlmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24sIHdlIHNob3VsZG4ndCBuZWNlc3NhcmlseSBjYWNoZS4uLgovLyBGSVhNRTogdGhlcmUncyBzb21lIGFubm95aW5nIGR1cGxpY2F0aW9uIG9mIGNvZGUgaW4gdGhlIHZhcmlvdXMgdmVyc2lvbmVkIG1haW5zCgovLyBOb3RlOiBzcGF3bi1mY2dpIGNhbiBoZWxwIHdpdGggZmFzdGNnaSBvbiBuZ2lueAoKLy8gRklYTUU6IHRvIGRvOiBhZGQgb3BlbnNzbCBvcHRpb25hbGx5Ci8vIG1ha2Ugc3VyZSBlbWJlZGRlZF9odHRwZCBkb2Vzbid0IHNlbmQgdHdvIGFuc3dlcnMgaWYgb25lIHdyaXRlcygpIHRoZW4gZGllcwoKLysrCglQcm92aWRlcyBhIHVuaWZvcm0gc2VydmVyLXNpZGUgQVBJIGZvciBDR0ksIEZhc3RDR0ksIFNDR0ksIGFuZCBIVFRQIHdlYiBhcHBsaWNhdGlvbnMuCgoJLS0tCglpbXBvcnQgYXJzZC5jZ2k7CgoJLy8gSW5zdGVhZCBvZiB3cml0aW5nIHlvdXIgb3duIG1haW4oKSwgeW91IHNob3VsZCB3cml0ZSBhIGZ1bmN0aW9uCgkvLyB0aGF0IHRha2VzIGEgQ2dpIHBhcmFtLCBhbmQgdXNlIG1peGluIEdlbmVyaWNNYWluCgkvLyBmb3IgbWF4aW11bSBjb21wYXRpYmlsaXR5IHdpdGggZGlmZmVyZW50IHdlYiBzZXJ2ZXJzLgoJdm9pZCBoZWxsbyhDZ2kgY2dpKSB7CgkJY2dpLnNldFJlc3BvbnNlQ29udGVudFR5cGUoInRleHQvcGxhaW4iKTsKCgkJaWYoIm5hbWUiIGluIGNnaS5nZXQpCgkJCWNnaS53cml0ZSgiSGVsbG8sICIgfiBjZ2kuZ2V0WyJuYW1lIl0pOwoJCWVsc2UKCQkJY2dpLndyaXRlKCJIZWxsbywgd29ybGQhIik7Cgl9CgoJbWl4aW4gR2VuZXJpY01haW4haGVsbG87CgktLS0KCgoJQ29tcGlsZV9hbmRfcnVuOgoJCglGb3IgQ0dJLCBgZG1kIHlvdXJmaWxlLmQgY2dpLmRgIHRoZW4gcHV0IHRoZSBleGVjdXRhYmxlIGluIHlvdXIgY2dpLWJpbiBkaXJlY3RvcnkuCgoJRm9yIEZhc3RDR0k6IGBkbWQgeW91cmZpbGUuZCBjZ2kuZCAtdmVyc2lvbj1mYXN0Y2dpYCBhbmQgcnVuIGl0LiBzcGF3bi1mY2dpIGhlbHBzIG9uIG5naW54LiBZb3UgY2FuIHB1dCB0aGUgZmlsZSBpbiB0aGUgZGlyZWN0b3J5IGZvciBBcGFjaGUuIE9uIElJUywgcnVuIGl0IHdpdGggYSBwb3J0IG9uIHRoZSBjb21tYW5kIGxpbmUuCgoJRm9yIFNDR0k6IGBkbWQgeW91cmZpbGUuZCBjZ2kuZCAtdmVyc2lvbj1zY2dpYCBhbmQgcnVuIHRoZSBleGVjdXRhYmxlLCBwcm92aWRpbmcgYSBwb3J0IG51bWJlciBvbiB0aGUgY29tbWFuZCBsaW5lLgoKCUZvciBhbiBlbWJlZGRlZCBIVFRQIHNlcnZlciwgcnVuIGBkbWQgeW91cmZpbGUuZCBjZ2kuZCAtdmVyc2lvbj1lbWJlZGRlZF9odHRwZGAgYW5kIHJ1biB0aGUgZ2VuZXJhdGVkIHByb2dyYW0uIEl0IGxpc3RlbnMgb24gcG9ydCA4MDg1IGJ5IGRlZmF1bHQuIFlvdSBjYW4gY2hhbmdlIHRoaXMgb24gdGhlIGNvbW1hbmQgbGluZSB3aXRoIHRoZSAtLXBvcnQgb3B0aW9uIHdoZW4gcnVubmluZyB5b3VyIHByb2dyYW0uCgoJWW91IGNhbiBhbHNvIHNpbXVsYXRlIGEgcmVxdWVzdCBieSBwYXNzaW5nIHBhcmFtZXRlcnMgb24gdGhlIGNvbW1hbmQgbGluZSwgbGlrZToKCgkkKENPTlNPTEUKCS4veW91cnByb2dyYW0gR0VUIC8gbmFtZT1hZHIKCSkKCglBbmQgaXQgd2lsbCBwcmludCB0aGUgcmVzdWx0IHRvIHN0ZG91dC4KCglDR0lfU2V0dXBfdGlwczoKCglPbiBBcGFjaGUsIHlvdSBtYXkgZG8gYFNldEhhbmRsZXIgY2dpLXNjcmlwdGAgaW4geW91ciBgLmh0YWNjZXNzYCBmaWxlLgoKCUludGVncmF0aW9uX3RpcHM6CgoJY2dpLmQgd29ya3Mgd2VsbCB3aXRoIGRvbS5kIGZvciBnZW5lcmF0aW5nIGh0bWwuIFlvdSBtYXkgYWxzbyB1c2Ugd2ViLmQgZm9yIG90aGVyIHV0aWxpdGllcyBhbmQgYXV0b21hdGljIGFwaSB3cmFwcGluZy4KCglkb20uZCB1c2FnZToKCgktLS0KCQlpbXBvcnQgYXJzZC5jZ2k7CgkJaW1wb3J0IGFyc2QuZG9tOwoKCQl2b2lkIGhlbGxvX2RvbShDZ2kgY2dpKSB7CgkJCWF1dG8gZG9jdW1lbnQgPSBuZXcgRG9jdW1lbnQoKTsKCgkJCXN0YXRpYyBpbXBvcnQgc3RkLmZpbGU7CgkJCS8vIHBhcnNlIHRoZSBmaWxlIGluIHN0cmljdCBtb2RlLCByZXF1aXJpbmcgaXQgdG8gYmUgd2VsbC1mb3JtZWQgVVRGLTggWEhUTUwKCQkJLy8gKFlvdSdsbCBhcHByZWNpYXRlIHRoaXMgaWYgeW91J3ZlIGV2ZXIgaGFkIHRvIGRlYWwgd2l0aCBhIG1pc3NpbmcgPC9kaXY&#43;&#43;ICI9IiB&#43;IHN0ZC51cmkuZW5jb2RlQ29tcG9uZW50KHBhcnRzWzFdKTsKCQkJCX0KCQkJfQoJCX0KCgkJYWNjZXB0c0d6aXAgPSBmYWxzZTsKCQlrZWVwQWxpdmVSZXF1ZXN0ZWQgPSBmYWxzZTsKCQlyZXF1ZXN0SGVhZGVycyA9IGNhc3QoaW1tdXRhYmxlKSBfaGVhZGVyczsKCgkJY29va2llID0gX2Nvb2tpZTsKCQljb29raWVzQXJyYXkgPSAgZ2V0Q29va2llQXJyYXkoKTsKCQljb29raWVzID0ga2VlcExhc3RPZihjb29raWVzQXJyYXkpOwoKCQlxdWVyeVN0cmluZyA9IF9xdWVyeVN0cmluZzsKCQlnZXRBcnJheSA9IGNhc3QoaW1tdXRhYmxlKSBkZWNvZGVWYXJpYWJsZXMocXVlcnlTdHJpbmcpOwoJCWdldCA9IGtlZXBMYXN0T2YoZ2V0QXJyYXkpOwoKCQlwb3N0QXJyYXkgPSBjYXN0KGltbXV0YWJsZSkgX3Bvc3Q7CgkJcG9zdCA9IGtlZXBMYXN0T2YoX3Bvc3QpOwoKCQkvLyBGSVhNRQoJCWZpbGVzQXJyYXkgPSBudWxsOwoJCWZpbGVzID0gbnVsbDsKCgkJaXNDYWxsZWRXaXRoQ29tbWFuZExpbmVBcmd1bWVudHMgPSB0cnVlOwoKCQl0aGlzLnBvcnQgPSBwb3J0OwoJCXRoaXMucmVmZXJyZXIgPSByZWZlcnJlcjsKCQl0aGlzLnJlbW90ZUFkZHJlc3MgPSByZW1vdGVBZGRyZXNzOwoJCXRoaXMudXNlckFnZW50ID0gdXNlckFnZW50OwoJCXRoaXMuYXV0aG9yaXphdGlvbiA9IGF1dGhvcml6YXRpb247CgkJdGhpcy5vcmlnaW4gPSBvcmlnaW47CgkJdGhpcy5hY2NlcHQgPSBhY2NlcHQ7CgkJdGhpcy5sYXN0RXZlbnRJZCA9IGxhc3RFdmVudElkOwoJCXRoaXMuaHR0cHMgPSBodHRwczsKCQl0aGlzLmhvc3QgPSBob3N0OwoJCXRoaXMucmVxdWVzdE1ldGhvZCA9IHJlcXVlc3RNZXRob2Q7CgkJdGhpcy5yZXF1ZXN0VXJpID0gcmVxdWVzdFVyaTsKCQl0aGlzLnBhdGhJbmZvID0gcGF0aEluZm87CgkJdGhpcy5xdWVyeVN0cmluZyA9IHF1ZXJ5U3RyaW5nOwoJCXRoaXMucG9zdEpzb24gPSBudWxsOwoJfQoKCS8qKiBJbml0aWFsaXplcyBpdCB1c2luZyBhIENHSSBvciBDR0ktbGlrZSBpbnRlcmZhY2UgKi8KCXRoaXMobG9uZyBtYXhDb250ZW50TGVuZ3RoID0gZGVmYXVsdE1heENvbnRlbnRMZW5ndGgsCgkJLy8gdXNlIHRoaXMgdG8gb3ZlcnJpZGUgdGhlIGVudmlyb25tZW50IHZhcmlhYmxlIGxpc3RpbmcKCQlpbiBzdHJpbmdbc3RyaW5nXSBlbnYgPSBudWxsLAoJCS8vIGFuZCB0aGlzIHNob3VsZCByZXR1cm4gYSBjaHVuayBvZiBkYXRhLiByZXR1cm4gZW1wdHkgd2hlbiBkb25lCgkJY29uc3QodWJ5dGUpW10gZGVsZWdhdGUoKSByZWFkZGF0YSA9IG51bGwsCgkJLy8gZmluYWxseSwgdXNlIHRoaXMgdG8gZG8gY3VzdG9tIG91dHB1dCBpZiBuZWVkZWQKCQl2b2lkIGRlbGVnYXRlKGNvbnN0KHVieXRlKVtdKSBfcmF3RGF0YU91dHB1dCA9IG51bGwsCgkJLy8gdG8gZmx1c2ggdGVoIGN1c3RvbSBvdXRwdXQKCQl2b2lkIGRlbGVnYXRlKCkgX2ZsdXNoID0gbnVsbAoJCSkKCXsKCgkJLy8gdGhlc2UgYXJlIGFsbCBzZXQgbG9jYWxseSBzbyB0aGUgbG9vcCB3b3JrcwoJCS8vIHdpdGhvdXQgdHJpZ2dlcmluZyBlcnJvcnMgaW4gZG1kIDIuMDY0CgkJLy8gd2UgZ28gYWhlYWQgYW5kIHNldCB0aGVtIGF0IHRoZSBlbmQgb2YgaXQgdG8gdGhlIHRoaXMgdmVyc2lvbgoJCWludCBwb3J0OwoJCXN0cmluZyByZWZlcnJlcjsKCQlzdHJpbmcgcmVtb3RlQWRkcmVzczsKCQlzdHJpbmcgdXNlckFnZW50OwoJCXN0cmluZyBhdXRob3JpemF0aW9uOwoJCXN0cmluZyBvcmlnaW47CgkJc3RyaW5nIGFjY2VwdDsKCQlzdHJpbmcgbGFzdEV2ZW50SWQ7CgkJYm9vbCBodHRwczsKCQlzdHJpbmcgaG9zdDsKCQlSZXF1ZXN0TWV0aG9kIHJlcXVlc3RNZXRob2Q7CgkJc3RyaW5nIHJlcXVlc3RVcmk7CgkJc3RyaW5nIHBhdGhJbmZvOwoJCXN0cmluZyBxdWVyeVN0cmluZzsKCgoKCQlpc0NhbGxlZFdpdGhDb21tYW5kTGluZUFyZ3VtZW50cyA9IGZhbHNlOwoJCXJhd0RhdGFPdXRwdXQgPSBfcmF3RGF0YU91dHB1dDsKCQlmbHVzaERlbGVnYXRlID0gX2ZsdXNoOwoJCWF1dG8gZ2V0ZW52ID0gZGVsZWdhdGUgc3RyaW5nKHN0cmluZyB2YXIpIHsKCQkJaWYoZW52IGlzIG51bGwpCgkJCQlyZXR1cm4gc3RkLnByb2Nlc3MuZW52aXJvbm1lbnQuZ2V0KHZhcik7CgkJCWF1dG8gZSA9IHZhciBpbiBlbnY7CgkJCWlmKGUgaXMgbnVsbCkKCQkJCXJldHVybiBudWxsOwoJCQlyZXR1cm4gKmU7CgkJfTsKCgkJZW52aXJvbm1lbnRWYXJpYWJsZXMgPSBlbnYgaXMgbnVsbCA/CgkJCWNhc3QoY29uc3QpIGVudmlyb25tZW50LnRvQUEgOgoJCQllbnY7CgoJCS8vIGZldGNoaW5nIGFsbCB0aGUgcmVxdWVzdCBoZWFkZXJzCgkJc3RyaW5nW3N0cmluZ10gcmVxdWVzdEhlYWRlcnNIZXJlOwoJCWZvcmVhY2goaywgdjsgZW52IGlzIG51bGwgPyBjYXN0KGNvbnN0KSBlbnZpcm9ubWVudC50b0FBKCkgOiBlbnYpIHsKCQkJaWYoay5zdGFydHNXaXRoKCJIVFRQXyIpKSB7CgkJCQlyZXF1ZXN0SGVhZGVyc0hlcmVbcmVwbGFjZShrWyJIVFRQXyIubGVuZ3RoIC4uICRdLnRvTG93ZXIoKSwgIl8iLCAiLSIpXSA9IHY7CgkJCX0KCQl9CgoJCXRoaXMucmVxdWVzdEhlYWRlcnMgPSBhc3N1bWVVbmlxdWUocmVxdWVzdEhlYWRlcnNIZXJlKTsKCgkJcmVxdWVzdFVyaSA9IGdldGVudigiUkVRVUVTVF9VUkkiKTsKCgkJY29va2llID0gZ2V0ZW52KCJIVFRQX0NPT0tJRSIpOwoJCWNvb2tpZXNBcnJheSA9IGdldENvb2tpZUFycmF5KCk7CgkJY29va2llcyA9IGtlZXBMYXN0T2YoY29va2llc0FycmF5KTsKCgkJcmVmZXJyZXIgPSBnZXRlbnYoIkhUVFBfUkVGRVJFUiIpOwoJCXVzZXJBZ2VudCA9IGdldGVudigiSFRUUF9VU0VSX0FHRU5UIik7CgkJcmVtb3RlQWRkcmVzcyA9IGdldGVudigiUkVNT1RFX0FERFIiKTsKCQlob3N0ID0gZ2V0ZW52KCJIVFRQX0hPU1QiKTsKCQlwYXRoSW5mbyA9IGdldGVudigiUEFUSF9JTkZPIik7CgoJCXF1ZXJ5U3RyaW5nID0gZ2V0ZW52KCJRVUVSWV9TVFJJTkciKTsKCQlzY3JpcHROYW1lID0gZ2V0ZW52KCJTQ1JJUFRfTkFNRSIpOwoJCXsKCQkJaW1wb3J0IGNvcmUucnVudGltZTsKCQkJYXV0byBzZm4gPSBnZXRlbnYoIlNDUklQVF9GSUxFTkFNRSIpOwoJCQlzY3JpcHRGaWxlTmFtZSA9IHNmbi5sZW5ndGggPyBzZm4gOiBSdW50aW1lLmFyZ3NbMF07CgkJfQoKCQlib29sIGlpcyA9IGZhbHNlOwoKCQkvLyBCZWNhdXNlIElJUyBkb2Vzbid0IHBhc3MgcmVxdWVzdFVyaSwgd2Ugc2ltdWxhdGUgaXQgaGVyZSBpZiBpdCdzIGVtcHR5LgoJCWlmKHJlcXVlc3RVcmkubGVuZ3RoID09IDApIHsKCQkJLy8gSUlTIHNvbWV0aW1lcyBpbmNsdWRlcyB0aGUgc2NyaXB0IG5hbWUgYXMgcGFydCBvZiB0aGUgcGF0aCBpbmZvIC0gd2UgZG9uJ3Qgd2FudCB0aGF0CgkJCWlmKHBhdGhJbmZvLmxlbmd0aCA&#43;PSBzY3JpcHROYW1lLmxlbmd0aCAmJiAocGF0aEluZm9bMCAuLiBzY3JpcHROYW1lLmxlbmd0aF0gPT0gc2NyaXB0TmFtZSkpCgkJCQlwYXRoSW5mbyA9IHBhdGhJbmZvW3NjcmlwdE5hbWUubGVuZ3RoIC4uICRdOwoKCQkJcmVxdWVzdFVyaSA9IHNjcmlwdE5hbWUgfiBwYXRoSW5mbyB&#43;IChxdWVyeVN0cmluZy5sZW5ndGggPyAoIj8iIH4gcXVlcnlTdHJpbmcpIDogIiIpOwoKCQkJaWlzID0gdHJ1ZTsgLy8gRklYTUUgSEFDSyAtIHVzZWQgaW4gYnlDaHVuayBiZWxvdyAtIHNlZSBidWd6aWxsYSA2MzM5CgoJCQkvLyBGSVhNRTogdGhpcyB3b3JrcyBmb3IgYXBhY2hlIGFuZCBpaXMuLi4gYnV0IHdoYXQgYWJvdXQgb3RoZXJzPwoJCX0KCgoJCWdldCA9IGdldEdldFZhcmlhYmxlcyhxdWVyeVN0cmluZyk7CgkJYXV0byB1Z2ggPSBkZWNvZGVWYXJpYWJsZXMocXVlcnlTdHJpbmcpOwoJCWdldEFycmF5ID0gYXNzdW1lVW5pcXVlKHVnaCk7CgoKCQkvLyBOT1RFOiBvbiBzaGl0cGFjaGUsIHlvdSBuZWVkIHRvIHNwZWNpZmljYWxseSBmb3J3YXJkIHRoaXMKCQlhdXRob3JpemF0aW9uID0gZ2V0ZW52KCJIVFRQX0FVVEhPUklaQVRJT04iKTsKCQkvLyB0aGlzIGlzIGEgaGFjayBiZWNhdXNlIEFwYWNoZSBpcyBhIHNoaXRsb2FkIG9mIGZ1Y2sgYW5kCgkJLy8gcmVmdXNlcyB0byBzZW5kIHRoZSByZWFsIGhlYWRlciB0byB1cy4gQ29tcGF0aWJsZQoJCS8vIHByb2dyYW1zIHNob3VsZCBzZW5kIGJvdGggdGhlIHN0YW5kYXJkIGFuZCBYLSB2ZXJzaW9ucwoKCQkvLyBOT1RFOiBpZiB5b3UgaGF2ZSBhY2Nlc3MgdG8gLmh0YWNjZXNzIG9yIGh0dHBkLmNvbmYsIHlvdSBjYW4gbWFrZSB0aGlzCgkJLy8gdW5uZWNlc3Nhcnkgd2l0aCBtb2RfcmV3cml0ZSwgc28gaXQgaXMgY29tbWVudGVkCgoJCS8vaWYoYXV0aG9yaXphdGlvbi5sZW5ndGggPT0gMCkgLy8gaWYgdGhlIHN0ZCBpcyB0aGVyZSwgdXNlIGl0CgkJLy8JYXV0aG9yaXphdGlvbiA9IGdldGVudigiSFRUUF9YX0FVVEhPUklaQVRJT04iKTsKCgkJLy8gdGhlIFJFRElSRUNUX0hUVFBTIGNoZWNrIGlzIGhlcmUgYmVjYXVzZSB3aXRoIGFuIEFwYWNoZSBoYWNrLCB0aGUgcG9ydCBjYW4gYmVjb21lIHdyb25nCgkJaWYoZ2V0ZW52KCJTRVJWRVJfUE9SVCIpLmxlbmd0aCAmJiBnZXRlbnYoIlJFRElSRUNUX0hUVFBTIikgIT0gIm9uIikKCQkJcG9ydCA9IHRvIWludChnZXRlbnYoIlNFUlZFUl9QT1JUIikpOwoJCWVsc2UKCQkJcG9ydCA9IDA7IC8vIHRoaXMgd2FzIHByb2JhYmx5IGNhbGxlZCBmcm9tIHRoZSBjb21tYW5kIGxpbmUKCgkJYXV0byBhZSA9IGdldGVudigiSFRUUF9BQ0NFUFRfRU5DT0RJTkciKTsKCQlpZihhZS5sZW5ndGggJiYgYWUuaW5kZXhPZigiZ3ppcCIpICE9IC0xKQoJCQlhY2NlcHRzR3ppcCA9IHRydWU7CgoJCWFjY2VwdCA9IGdldGVudigiSFRUUF9BQ0NFUFQiKTsKCQlsYXN0RXZlbnRJZCA9IGdldGVudigiSFRUUF9MQVNUX0VWRU5UX0lEIik7CgoJCWF1dG8ga2EgPSBnZXRlbnYoIkhUVFBfQ09OTkVDVElPTiIpOwoJCWlmKGthLmxlbmd0aCAmJiBrYS50b0xvd2VyKCkuaW5kZXhPZigia2VlcC1hbGl2ZSIpICE9IC0xKQoJCQlrZWVwQWxpdmVSZXF1ZXN0ZWQgPSB0cnVlOwoKCQlhdXRvIG9yID0gZ2V0ZW52KCJIVFRQX09SSUdJTiIpOwoJCQlvcmlnaW4gPSBvcjsKCgkJYXV0byBybSA9IGdldGVudigiUkVRVUVTVF9NRVRIT0QiKTsKCQlpZihybS5sZW5ndGgpCgkJCXJlcXVlc3RNZXRob2QgPSB0byFSZXF1ZXN0TWV0aG9kKGdldGVudigiUkVRVUVTVF9NRVRIT0QiKSk7CgkJZWxzZQoJCQlyZXF1ZXN0TWV0aG9kID0gUmVxdWVzdE1ldGhvZC5Db21tYW5kTGluZTsKCgkJCQkJCS8vIEZJWE1FOiBoYWNrIG9uIFJFRElSRUNUX0hUVFBTOyB0aGlzIGlzIHRoZXJlIGJlY2F1c2UgdGhlIHdvcmsgYXBwIHVzZXMgbW9kX3Jld3JpdGUgd2hpY2ggbG9zZXMgdGhlIGh0dHBzIGZsYWchIFNvIEkgc2V0IGl0IHdpdGggW0U9SFRUUFM9JUhUVFBTXSBvciB3aGF0ZXZlciBidXQgdGhlbiBpdCBnZXRzIHRyYW5zbGF0ZWQgdG8gaGVyZSBzbyBpIHdhbnQgaXQgdG8gc3RpbGwgd29yay4gVGhpcyBpcyBhcmd1YWJseSB3cm9uZyBidXQgbWVoLgoJCWh0dHBzID0gKGdldGVudigiSFRUUFMiKSA9PSAib24iIHx8IGdldGVudigiUkVESVJFQ1RfSFRUUFMiKSA9PSAib24iKTsKCgkJLy8gRklYTUU6IERPQ1VNRU5UX1JPT1Q/CgoJCS8vIEZJWE1FOiB3aGF0IGFib3V0IFBVVD8KCQlpZihyZXF1ZXN0TWV0aG9kID09IFJlcXVlc3RNZXRob2QuUE9TVCkgewoJCQl2ZXJzaW9uKHByZXNlcnZlRGF0YSkgLy8gYSBoYWNrIHRvIG1ha2UgZm9yd2FyZGluZyBzaW1wbGVyCgkJCQlpbW11dGFibGUodWJ5dGUpW10gZGF0YTsKCQkJc2l6ZV90IGFtb3VudFJlY2VpdmVkID0gMDsKCQkJYXV0byBjb250ZW50VHlwZSA9IGdldGVudigiQ09OVEVOVF9UWVBFIik7CgoJCQkvLyBGSVhNRTogaXMgdGhpcyBldmVyIG5vdCBnb2luZyB0byBiZSBzZXQ/IEkgZ3Vlc3MgaXQgZGVwZW5kcwoJCQkvLyBvbiBpZiB0aGUgc2VydmVyIGRlLWNodW5rcyBhbmQgYnVmZmVycy4uLiBzZWVtcyBsaWtlIGl0IGhhcyBwb3RlbnRpYWwKCQkJLy8gdG8gYmUgc2xvdyBpZiB0aGV5IGRpZCB0aGF0LiBUaGUgc3BlYyBzYXlzIGl0IGlzIGFsd2F5cyB0aGVyZSB0aG91Z2guCgkJCS8vIEFuZCBpdCBoYXMgd29ya2VkIHJlbGlhYmx5IGZvciBtZSBhbGwgeWVhciBpbiB0aGUgbGl2ZSBlbnZpcm9ubWVudCwKCQkJLy8gYnV0IHNvbWUgc2VydmVycyBtaWdodCBiZSBkaWZmZXJlbnQuCgkJCWF1dG8gY29udGVudExlbmd0aCA9IHRvIXNpemVfdChnZXRlbnYoIkNPTlRFTlRfTEVOR1RIIikpOwoKCQkJaW1tdXRhYmxlIG9yaWdpbmFsQ29udGVudExlbmd0aCA9IGNvbnRlbnRMZW5ndGg7CgkJCWlmKGNvbnRlbnRMZW5ndGgpIHsKCQkJCWlmKG1heENvbnRlbnRMZW5ndGggPiAwICYmIGNvbnRlbnRMZW5ndGggPiBtYXhDb250ZW50TGVuZ3RoKSB7CgkJCQkJc2V0UmVzcG9uc2VTdGF0dXMoIjQxMyBSZXF1ZXN0IGVudGl0eSB0b28gbGFyZ2UiKTsKCQkJCQl3cml0ZSgiWW91IHRyaWVkIHRvIHVwbG9hZCBhIGZpbGUgdGhhdCBpcyB0b28gbGFyZ2UuIik7CgkJCQkJY2xvc2UoKTsKCQkJCQl0aHJvdyBuZXcgRXhjZXB0aW9uKCJQT1NUIHRvbyBsYXJnZSIpOwoJCQkJfQoJCQkJcHJlcGFyZUZvckluY29taW5nRGF0YUNodW5rcyhjb250ZW50VHlwZSwgY29udGVudExlbmd0aCk7CgoKCQkJCWludCBwcm9jZXNzQ2h1bmsoaW4gdWJ5dGVbXSBjaHVuaykgewoJCQkJCWlmKGNodW5rLmxlbmd0aCA&#43;&#43;IHBwcy5jb250ZW50VHlwZSk7CgkJfQoJfQoKCS8vIGhhbmRsZXMgc3RyZWFtaW5nIFBPU1QgZGF0YS4gSWYgeW91IGhhbmRsZSBzb21lIG90aGVyIGNvbnRlbnQgdHlwZSwgeW91IHNob3VsZAoJLy8gb3ZlcnJpZGUgdGhpcy4gSWYgdGhlIGRhdGEgaXNuJ3QgdGhlIGNvbnRlbnQgdHlwZSB5b3Ugd2FudCwgeW91IG91Z2h0IHRvIGNhbGwKCS8vIHN1cGVyLmhhbmRsZUluY29taW5nRGF0YUNodW5rIHNvIHJlZ3VsYXIgZm9ybXMgYW5kIGZpbGVzIHN0aWxsIHdvcmsuCgoJLy8gRklYTUU6IEkgZG8gc29tZSBjb3B5aW5nIGluIGhlcmUgdGhhdCBJJ20gcHJldHR5IHN1cmUgaXMgdW5uZWNlc3NhcnksIGFuZCB0aGUKCS8vIGZpbGUgc3R1ZmYgSSdtIHN1cmUgaXMgaW5lZmZpY2llbnQuIEJ1dCwgbXkgZ3Vlc3MgaXMgdGhlIHJlYWwgYm90dGxlbmVjayBpcyBuZXR3b3JrCgkvLyBpbnB1dCBhbnl3YXksIHNvIEknbSBub3QgZ29pbmcgdG8gZ2V0IHRvbyB3b3JrZWQgdXAgYWJvdXQgaXQgcmlnaHQgbm93LgoJcHJvdGVjdGVkIHZvaWQgaGFuZGxlSW5jb21pbmdEYXRhQ2h1bmsoY29uc3QodWJ5dGUpW10gY2h1bmspIHsKCQlpZihjaHVuay5sZW5ndGggPT0gMCkKCQkJcmV0dXJuOwoJCWFzc2VydChjaHVuay5sZW5ndGggPD0gMzIgKiAxMDI0ICogMTAyNCk7IC8vIHdlIHVzZSBjaHVuayBzaXplIGFzIGEgbWVtb3J5IGNvbnN0cmFpbnQgdGhpbmcsIHNvCgkJCQkJCQkvLyBpZiB3ZSdyZSBwYXNzZWQgYmlnIGNodW5rcywgaXQgbWlnaHQgdGhyb3cgdW5uZWNlc3NhcmlseS4KCQkJCQkJCS8vIGp1c3QgcGFzcyBpdCBzbWFsbGVyIGNodW5rcyBhdCBhIHRpbWUuCgkJaWYocHBzLmlzTXVsdGlwYXJ0KSB7CgkJCS8vIG11bHRpcGFydC9mb3JtLWRhdGEKCgoJCQl2b2lkIHBpZWNlSGFzTmV3Q29udGVudCgpIHsKCQkJCS8vIHdlIGp1c3QgZ3JldyB0aGUgcGllY2UncyBidWZmZXIuIERvIHdlIGhhdmUgdG8gc3dpdGNoIHRvIGZpbGUgYmFja2luZz8KCQkJCWlmKHBwcy5waWVjZS5jb250ZW50SW5NZW1vcnkpIHsKCQkJCQlpZihwcHMucGllY2UuY29udGVudC5sZW5ndGggPD0gMTAgKiAxMDI0ICogMTAyNCkKCQkJCQkJLy8gbWVoLCBJJ20gb2sgd2l0aCBpdC4KCQkJCQkJcmV0dXJuOwoJCQkJCWVsc2UgewoJCQkJCQkvLyB0aGlzIGlzIHRvbyBiaWcuCgkJCQkJCWlmKCFwcHMuaXNGaWxlKQoJCQkJCQkJdGhyb3cgbmV3IEV4Y2VwdGlvbigiUmVxdWVzdCBlbnRpdHkgdG9vIGxhcmdlIik7IC8vIGEgdmFyaWFibGUgdGhpcyBiaWcgaXMga2luZGEgcmlkaWN1bG91cywganVzdCByZWplY3QgaXQuCgkJCQkJCWVsc2UgewoJCQkJCQkJLy8gYSBmaWxlIHRoaXMgbGFyZ2UgaXMgcHJvYmFibHkgYWNjZXB0YWJsZSB0aG91Z2guLi4gbGV0J3MgdXNlIGEgYmFja2luZyBmaWxlLgoJCQkJCQkJcHBzLnBpZWNlLmNvbnRlbnRJbk1lbW9yeSA9IGZhbHNlOwoJCQkJCQkJLy8gRklYTUU6IHNheS4uLiBob3cgZG8gd2UgaW50ZW5kIHRvIGRlbGV0ZSB0aGVzZSB0aGluZ3M/IGNnaS5kaXNwb3NlIHBlcmhhcHMuCgoJCQkJCQkJaW50IGNvdW50ID0gMDsKCQkJCQkJCXBwcy5waWVjZS5jb250ZW50RmlsZW5hbWUgPSBnZXRUZW1wRGlyZWN0b3J5KCkgfiAiYXJzZF9jZ2lfdXBsb2FkZWRfZmlsZV8iIH4gdG8hc3RyaW5nKGdldFV0Y1RpbWUoKSkgfiAiLSIgfiB0byFzdHJpbmcoY291bnQpOwoJCQkJCQkJLy8gb2RkcyBhcmUgdGhpcyBsb29wIHdpbGwgbmV2ZXIgYmUgZW50ZXJlZCwgYnV0IHdlIHdhbnQgaXQganVzdCBpbiBjYXNlLgoJCQkJCQkJd2hpbGUoc3RkLmZpbGUuZXhpc3RzKHBwcy5waWVjZS5jb250ZW50RmlsZW5hbWUpKSB7CgkJCQkJCQkJY291bnQrKzsKCQkJCQkJCQlwcHMucGllY2UuY29udGVudEZpbGVuYW1lID0gZ2V0VGVtcERpcmVjdG9yeSgpIH4gImFyc2RfY2dpX3VwbG9hZGVkX2ZpbGVfIiB&#43;IHRvIXN0cmluZyhnZXRVdGNUaW1lKCkpIH4gIi0iIH4gdG8hc3RyaW5nKGNvdW50KTsKCQkJCQkJCX0KCQkJCQkJCS8vIEkgaG9wZSB0aGlzIGNyZWF0ZXMgdGhlIGZpbGUgcHJldHR5IHF1aWNrbHksIG9yIHRoZSBsb29wIG1pZ2h0IGJlIHVzZWxlc3MuLi4KCQkJCQkJCS8vIEZJWE1FOiBtYXliZSBJIHNob3VsZCB3cml0ZSBzb21lIGtpbmQgb2YgY3VzdG9tIHRyYW5zYWN0aW9uIGhlcmUuCgkJCQkJCQlzdGQuZmlsZS53cml0ZShwcHMucGllY2UuY29udGVudEZpbGVuYW1lLCBwcHMucGllY2UuY29udGVudCk7CgoJCQkJCQkJcHBzLnBpZWNlLmNvbnRlbnQgPSBudWxsOwoJCQkJCQl9CgkJCQkJfQoJCQkJfSBlbHNlIHsKCQkJCQkvLyBpdCdzIGFscmVhZHkgaW4gYSBmaWxlLCBzbyBqdXN0IGFwcGVuZCBpdCB0byB3aGF0IHdlIGhhdmUKCQkJCQlpZihwcHMucGllY2UuY29udGVudC5sZW5ndGgpIHsKCQkJCQkJLy8gRklYTUU6IHRoaXMgaXMgc3VyZWx5IHZlcnkgaW5lZmZpY2llbnQuLi4gd2UnbGwgYmUgY2FsbGluZyB0aGlzIGJ5IDRrYiBjaHVuay4uLgoJCQkJCQlzdGQuZmlsZS5hcHBlbmQocHBzLnBpZWNlLmNvbnRlbnRGaWxlbmFtZSwgcHBzLnBpZWNlLmNvbnRlbnQpOwoJCQkJCQlwcHMucGllY2UuY29udGVudCA9IG51bGw7CgkJCQkJfQoJCQkJfQoJCQl9CgoKCQkJdm9pZCBjb21taXRQYXJ0KCkgewoJCQkJaWYoIXBwcy53ZUhhdmVBUGFydCkKCQkJCQlyZXR1cm47CgoJCQkJcGllY2VIYXNOZXdDb250ZW50KCk7IC8vIGJlIHN1cmUgdGhlIG5ldyBjb250ZW50IGlzIGhhbmRsZWQgZXZlcnkgdGltZQoKCQkJCWlmKHBwcy5pc0ZpbGUpIHsKCQkJCQkvLyBJJ20gbm90IHN1cmUgaWYgb3RoZXIgZW52aXJvbm1lbnRzIHB1dCBmaWxlcyBpbiBwb3N0IG9yIG5vdC4uLgoJCQkJCS8vIEkgdXNlZCB0byBub3QgZG8gaXQsIGJ1dCBJIHRoaW5rIEkgc2hvdWxkLCBzaW5jZSBpdCBpcyB0aGVyZS4uLgoJCQkJCXBwcy5fcG9zdFtwcHMucGllY2UubmFtZV0gfj0gcHBzLnBpZWNlLmZpbGVuYW1lOwoJCQkJCXBwcy5fZmlsZXNbcHBzLnBpZWNlLm5hbWVdIH49IHBwcy5waWVjZTsKCQkJCX0gZWxzZQoJCQkJCXBwcy5fcG9zdFtwcHMucGllY2UubmFtZV0gfj0gY2FzdChzdHJpbmcpIHBwcy5waWVjZS5jb250ZW50OwoKCQkJCS8qCgkJCQlzdGRlcnIud3JpdGVsbigiUkVDRUlWRUQ6ICIsIHBwcy5waWVjZS5uYW1lLCAiPSIsIAoJCQkJCXBwcy5waWVjZS5jb250ZW50Lmxlbmd0aCA8IDEwMDAKCQkJCQk/CgkJCQkJdG8hc3RyaW5nKHBwcy5waWVjZS5jb250ZW50KQoJCQkJCToKCQkJCQkidG9vIGxvbmciKTsKCQkJCSovCgoJCQkJLy8gRklYTUU6IHRoZSBsaW1pdCBoZXJlCgkJCQlwcHMubWVtb3J5Q29tbWl0dGVkICs9IHBwcy5waWVjZS5jb250ZW50Lmxlbmd0aDsKCgkJCQlwcHMud2VIYXZlQVBhcnQgPSBmYWxzZTsKCQkJCXBwcy53aGF0RG9XZVdhbnQgPSAxOwoJCQkJcHBzLnRoaXNPbmVzSGVhZGVycyA9IG51bGw7CgkJCQlwcHMudGhpc09uZXNEYXRhID0gbnVsbDsKCgkJCQlwcHMucGllY2UgPSBVcGxvYWRlZEZpbGUuaW5pdDsKCQkJCXBwcy5pc0ZpbGUgPSBmYWxzZTsKCQkJfQoKCQkJdm9pZCBhY2NlcHRDaHVuaygpIHsKCQkJCXBwcy5idWZmZXIgfj0gY2h1bms7CgkJCQljaHVuayA9IG51bGw7IC8vIHdlJ3ZlIGNvbnN1bWVkIGl0IGludG8gdGhlIGJ1ZmZlciwgc28ga2VlcGluZyBpdCBqdXN0IGJyaW5ncyBjb25mdXNpb24KCQkJfQoKCQkJaW1tdXRhYmxlKHVieXRlKVtdIGNvbnN1bWUoc2l6ZV90IGhvd011Y2gpIHsKCQkJCXBwcy5jb250ZW50Q29uc3VtZWQgKz0gaG93TXVjaDsKCQkJCWF1dG8gcmV0ID0gcHBzLmJ1ZmZlclswIC4uIGhvd011Y2hdOwoJCQkJcHBzLmJ1ZmZlciA9IHBwcy5idWZmZXJbaG93TXVjaCAuLiAkXTsKCQkJCXJldHVybiByZXQ7CgkJCX0KCgkJCWRhdGFDb25zdW1wdGlvbkxvb3A6IGRvIHsKCQkJc3dpdGNoKHBwcy53aGF0RG9XZVdhbnQpIHsKCQkJCWRlZmF1bHQ6IGFzc2VydCgwKTsKCQkJCWNhc2UgMDoKCQkJCQlhY2NlcHRDaHVuaygpOwoJCQkJCS8vIHRoZSBmb3JtYXQgYmVnaW5zIHdpdGggdHdvIGV4dHJhIGxlYWRpbmcgZGFzaGVzLCB0aGVuIHdlIHNob3VsZCBiZSBhdCB0aGUgYm91bmRhcnkKCQkJCQlpZihwcHMuYnVmZmVyLmxlbmd0aCA8IDIpCgkJCQkJCXJldHVybjsKCQkJCQlhc3NlcnQocHBzLmJ1ZmZlclswXSA9PSAnLScsICJubyBsZWFkaW5nIGRhc2giKTsKCQkJCQljb25zdW1lKDEpOwoJCQkJCWFzc2VydChwcHMuYnVmZmVyWzBdID09ICctJywgIm5vIHNlY29uZCBsZWFkaW5nIGRhc2giKTsKCQkJCQljb25zdW1lKDEpOwoKCQkJCQlwcHMud2hhdERvV2VXYW50ID0gMTsKCQkJCQlnb3RvIGNhc2UgMTsKCQkJCS8qIGZhbGx0aHJvdWdoICovCgkJCQljYXNlIDE6IC8vIGxvb2tpbmcgZm9yIGhlYWRlcnMKCQkJCQkvLyBoZXJlLCB3ZSBzaG91bGQgYmUgbGluZWQgdXAgcmlnaHQgYXQgdGhlIGJvdW5kYXJ5LCB3aGljaCBpcyBmb2xsb3dlZCBieSBhIFxyXG4KCgkJCQkJLy8gd2FudCB0byBrZWVwIHRoZSBidWZmZXIgdW5kZXIgY29udHJvbCBpbiBjYXNlIHdlJ3JlIHVuZGVyIGF0dGFjawoJCQkJCS8vc3RkZXJyLndyaXRlbG4oImhlcmUgb25jZSIpOwoJCQkJCS8vaWYocHBzLmJ1ZmZlci5sZW5ndGggKyBjaHVuay5sZW5ndGggPiA3MCAqIDEwMjQpIC8vIHRoZXkgc2hvdWxkIGJlIDwgMSBrYiByZWFsbHkuLi4uCgkJCQkJLy8JdGhyb3cgbmV3IEV4Y2VwdGlvbigid3RmIGlzIHVwIHdpdGggdGhlIGh1Z2UgbWltZSBwYXJ0IGhlYWRlcnMiKTsKCgkJCQkJYWNjZXB0Q2h1bmsoKTsKCgkJCQkJaWYocHBzLmJ1ZmZlci5sZW5ndGggPCBwcHMuYm91bmRhcnkubGVuZ3RoKQoJCQkJCQlyZXR1cm47IC8vIG5vdCBlbm91Z2ggZGF0YSwgc2luY2UgdGhlcmUgc2hvdWxkIGFsd2F5cyBiZSBhIGJvdW5kYXJ5IGhlcmUgYXQgbGVhc3QKCgkJCQkJaWYocHBzLmNvbnRlbnRDb25zdW1lZCArIHBwcy5ib3VuZGFyeS5sZW5ndGggKyA2ID09IHBwcy5leHBlY3RlZExlbmd0aCkgewoJCQkJCQlhc3NlcnQocHBzLmJ1ZmZlci5sZW5ndGggPT0gcHBzLmJvdW5kYXJ5Lmxlbmd0aCArIDQgKyAyKTsgLy8gLS0sIC0tLCBhbmQgXHJcbgoJCQkJCQkvLyB3ZSAqc2hvdWxkKiBiZSBhdCB0aGUgZW5kIGhlcmUhCgkJCQkJCWFzc2VydChwcHMuYnVmZmVyWzBdID09ICctJyk7CgkJCQkJCWNvbnN1bWUoMSk7CgkJCQkJCWFzc2VydChwcHMuYnVmZmVyWzBdID09ICctJyk7CgkJCQkJCWNvbnN1bWUoMSk7CgoJCQkJCQkvLyB0aGUgbWVzc2FnZSBpcyB0ZXJtaW5hdGVkIGJ5IC0tQk9VTkRBUlktLVxyXG4gKGFmdGVyIGEgXHJcbiBsZWFkaW5nIHRvIHRoZSBib3VuZGFyeSkKCQkJCQkJYXNzZXJ0KHBwcy5idWZmZXJbMCAuLiBwcHMuYm91bmRhcnkubGVuZ3RoXSA9PSBjYXN0KGNvbnN0KHVieXRlW10pKSBwcHMuYm91bmRhcnksCgkJCQkJCQkibm90IGxpbmVkIHVwIG9uIGJvdW5kYXJ5ICIgfiBwcHMuYm91bmRhcnkpOwoJCQkJCQljb25zdW1lKHBwcy5ib3VuZGFyeS5sZW5ndGgpOwoKCQkJCQkJYXNzZXJ0KHBwcy5idWZmZXJbMF0gPT0gJy0nKTsKCQkJCQkJY29uc3VtZSgxKTsKCQkJCQkJYXNzZXJ0KHBwcy5idWZmZXJbMF0gPT0gJy0nKTsKCQkJCQkJY29uc3VtZSgxKTsKCgkJCQkJCWFzc2VydChwcHMuYnVmZmVyWzBdID09ICdccicpOwoJCQkJCQljb25zdW1lKDEpOwoJCQkJCQlhc3NlcnQocHBzLmJ1ZmZlclswXSA9PSAnXG4nKTsKCQkJCQkJY29uc3VtZSgxKTsKCgkJCQkJCWFzc2VydChwcHMuYnVmZmVyLmxlbmd0aCA9PSAwKTsKCQkJCQkJYXNzZXJ0KHBwcy5jb250ZW50Q29uc3VtZWQgPT0gcHBzLmV4cGVjdGVkTGVuZ3RoKTsKCQkJCQkJYnJlYWsgZGF0YUNvbnN1bXB0aW9uTG9vcDsgLy8gd2UncmUgZG9uZSEKCQkJCQl9IGVsc2UgewoJCQkJCQkvLyB3ZSdyZSBub3QgZG9uZSB5ZXQuIFdlIHNob3VsZCBiZSBsaW5lZCB1cCBvbiBhIGJvdW5kYXJ5LgoKCQkJCQkJLy8gQnV0LCB3ZSB3YW50IHRvIGVuc3VyZSB0aGUgaGVhZGVycyBhcmUgaGVyZSBiZWZvcmUgd2UgY29uc3VtZSBhbnl0aGluZyEKCQkJCQkJYXV0byBoZWFkZXJFbmRMb2NhdGlvbiA9IGxvY2F0aW9uT2YocHBzLmJ1ZmZlciwgIlxyXG5cclxuIik7CgkJCQkJCWlmKGhlYWRlckVuZExvY2F0aW9uID09IC0xKQoJCQkJCQkJcmV0dXJuOyAvLyB0aGV5ICpzaG91bGQqIGFsbCBiZSBoZXJlLCBzbyB3ZSBjYW4gaGFuZGxlIHRoZW0gYWxsIGF0IG9uY2UuCgoJCQkJCQlhc3NlcnQocHBzLmJ1ZmZlclswIC4uIHBwcy5ib3VuZGFyeS5sZW5ndGhdID09IGNhc3QoY29uc3QodWJ5dGVbXSkpIHBwcy5ib3VuZGFyeSwKCQkJCQkJCSJub3QgbGluZWQgdXAgb24gYm91bmRhcnkgIiB&#43;IHBwcy5ib3VuZGFyeSk7CgoJCQkJCQljb25zdW1lKHBwcy5ib3VuZGFyeS5sZW5ndGgpOwoJCQkJCQkvLyB0aGUgYm91bmRhcnkgaXMgYWx3YXlzIGZvbGxvd2VkIGJ5IGEgXHJcbgoJCQkJCQlhc3NlcnQocHBzLmJ1ZmZlclswXSA9PSAnXHInKTsKCQkJCQkJY29uc3VtZSgxKTsKCQkJCQkJYXNzZXJ0KHBwcy5idWZmZXJbMF0gPT0gJ1xuJyk7CgkJCQkJCWNvbnN1bWUoMSk7CgkJCQkJfQoKCQkJCQkvLyByZS1ydW5uaW5nIHNpbmNlIGJ5IGNvbnN1bWluZyB0aGUgYm91bmRhcnksIHdlIGludmFsaWRhdGUgdGhlIG9sZCBpbmRleC4KCQkJCQlhdXRvIGhlYWRlckVuZExvY2F0aW9uID0gbG9jYXRpb25PZihwcHMuYnVmZmVyLCAiXHJcblxyXG4iKTsKCQkJCQlhc3NlcnQoaGVhZGVyRW5kTG9jYXRpb24gPj0gMCwgIm5vIGhlYWRlciIpOwoJCQkJCWF1dG8gdGhpc09uZXNIZWFkZXJzID0gcHBzLmJ1ZmZlclswLi5oZWFkZXJFbmRMb2NhdGlvbl07CgoJCQkJCWNvbnN1bWUoaGVhZGVyRW5kTG9jYXRpb24gKyA0KTsgLy8gVGhlICs0IGlzIHRoZSBcclxuXHJcbiB0aGF0IGNhcHMgaXQgb2ZmCgoJCQkJCXBwcy50aGlzT25lc0hlYWRlcnMgPSBzcGxpdChjYXN0KHN0cmluZykgdGhpc09uZXNIZWFkZXJzLCAiXHJcbiIpOwoKCQkJCQkvLyBub3cgd2UnbGwgcGFyc2UgdGhlIGhlYWRlcnMKCQkJCQlmb3JlYWNoKGg7IHBwcy50aGlzT25lc0hlYWRlcnMpIHsKCQkJCQkJYXV0byBwID0gaC5pbmRleE9mKCI6Iik7CgkJCQkJCWFzc2VydChwICE9IC0xLCAibm8gY29sb24gaW4gaGVhZGVyLCBnb3QgIiB&#43;IHRvIXN0cmluZyhwcHMudGhpc09uZXNIZWFkZXJzKSk7CgkJCQkJCXN0cmluZyBobiA9IGhbMC4ucF07CgkJCQkJCXN0cmluZyBodiA9IGhbcCsyLi4kXTsKCgkJCQkJCXN3aXRjaChobi50b0xvd2VyKSB7CgkJCQkJCQlkZWZhdWx0OiBhc3NlcnQoMCk7CgkJCQkJCQljYXNlICJjb250ZW50LWRpc3Bvc2l0aW9uIjoKCQkJCQkJCQlhdXRvIGluZm8gPSBodi5zcGxpdCgiOyAiKTsKCQkJCQkJCQlmb3JlYWNoKGk7IGluZm9bMS4uJF0pIHsgLy8gc2tpcHBpbmcgdGhlIGZvcm0tZGF0YQoJCQkJCQkJCQlhdXRvIG8gPSBpLnNwbGl0KCI9Iik7IC8vIEZJWE1FCgkJCQkJCQkJCXN0cmluZyBwbiA9IG9bMF07CgkJCQkJCQkJCXN0cmluZyBwdiA9IG9bMV1bMS4uJC0xXTsKCgkJCQkJCQkJCWlmKHBuID09ICJuYW1lIikgewoJCQkJCQkJCQkJcHBzLnBpZWNlLm5hbWUgPSBwdjsKCQkJCQkJCQkJfSBlbHNlIGlmIChwbiA9PSAiZmlsZW5hbWUiKSB7CgkJCQkJCQkJCQlwcHMucGllY2UuZmlsZW5hbWUgPSBwdjsKCQkJCQkJCQkJCXBwcy5pc0ZpbGUgPSB0cnVlOwoJCQkJCQkJCQl9CgkJCQkJCQkJfQoJCQkJCQkJYnJlYWs7CgkJCQkJCQljYXNlICJjb250ZW50LXR5cGUiOgoJCQkJCQkJCXBwcy5waWVjZS5jb250ZW50VHlwZSA9IGh2OwoJCQkJCQkJYnJlYWs7CgkJCQkJCX0KCQkJCQl9CgoJCQkJCXBwcy53aGF0RG9XZVdhbnQrKzsgLy8gbW92ZSB0byB0aGUgbmV4dCBzdGVwIC0gdGhlIGRhdGEKCQkJCWJyZWFrOwoJCQkJY2FzZSAyOgoJCQkJCS8vIHdoZW4gd2UgZ2V0IGhlcmUsIHBwcy5idWZmZXIgc2hvdWxkIGNvbnRhaW4gb3VyIGZpcnN0IGNodW5rIG9mIGRhdGEKCgkJCQkJaWYocHBzLmJ1ZmZlci5sZW5ndGggKyBjaHVuay5sZW5ndGggPiA4ICogMTAyNCAqIDEwMjQpIC8vIHdlIG1pZ2h0IGJ1ZmZlciBxdWl0ZSBhIGJpdCBidXQgbm90IG11Y2gKCQkJCQkJdGhyb3cgbmV3IEV4Y2VwdGlvbigid3RmIGlzIHVwIHdpdGggdGhlIGh1Z2UgbWltZSBwYXJ0IGJ1ZmZlciIpOwoKCQkJCQlhY2NlcHRDaHVuaygpOwoKCQkJCQkvLyBzbyB0aGUgdHJpY2sgaXMsIHdlIHdhbnQgdG8gcHJvY2VzcyBhbGwgdGhlIGRhdGEgdXAgdG8gdGhlIGJvdW5kYXJ5LAoJCQkJCS8vIGJ1dCB3aGF0IGlmIHRoZSBjaHVuaydzIGVuZCBjdXRzIHRoZSBib3VuZGFyeSBvZmY/IElmIHdlJ3JlIHVuc3VyZSwgd2UKCQkJCQkvLyB3YW50IHRvIHdhaXQgZm9yIHRoZSBuZXh0IGNodW5rLiBXZSBzdGFydCBieSBsb29raW5nIGZvciB0aGUgd2hvbGUgYm91bmRhcnkKCQkJCQkvLyBpbiB0aGUgYnVmZmVyIHNvbWV3aGVyZS4KCgkJCQkJYXV0byBib3VuZGFyeUxvY2F0aW9uID0gbG9jYXRpb25PZihwcHMuYnVmZmVyLCBwcHMubG9jYWxCb3VuZGFyeSk7CgkJCQkJLy8gYXNzZXJ0KGJvdW5kYXJ5TG9jYXRpb24gIT0gLTEsICJzaG91bGQgaGF2ZSBzZWVuICJ&#43;dG8hc3RyaW5nKGNhc3QodWJ5dGVbXSkgcHBzLmxvY2FsQm91bmRhcnkpfiIgaW4gIiB&#43;IHRvIXN0cmluZyhwcHMuYnVmZmVyKSk7CgkJCQkJaWYoYm91bmRhcnlMb2NhdGlvbiAhPSAtMSkgewoJCQkJCQkvLyB0aGlzIGlzIGVhc3kgLSB3ZSBjYW4gc2VlIGl0IGluIGl0J3MgZW50aXJldHkhCgoJCQkJCQlwcHMucGllY2UuY29udGVudCB&#43;PSBjb25zdW1lKGJvdW5kYXJ5TG9jYXRpb24pOwoKCQkJCQkJYXNzZXJ0KHBwcy5idWZmZXJbMF0gPT0gJ1xyJyk7CgkJCQkJCWNvbnN1bWUoMSk7CgkJCQkJCWFzc2VydChwcHMuYnVmZmVyWzBdID09ICdcbicpOwoJCQkJCQljb25zdW1lKDEpOwoJCQkJCQlhc3NlcnQocHBzLmJ1ZmZlclswXSA9PSAnLScpOwoJCQkJCQljb25zdW1lKDEpOwoJCQkJCQlhc3NlcnQocHBzLmJ1ZmZlclswXSA9PSAnLScpOwoJCQkJCQljb25zdW1lKDEpOwoJCQkJCQkvLyB0aGUgYm91bmRhcnkgaGVyZSBpcyBhbHdheXMgcHJlY2VkZWQgYnkgXHJcbi0tLCB3aGljaCBpcyB3aHkgd2UgdXNlZCBsb2NhbEJvdW5kYXJ5IGluc3RlYWQgb2YgYm91bmRhcnkgdG8gbG9jYXRlIGl0LiBDdXQgdGhhdCBvZmYuCgkJCQkJCXBwcy53ZUhhdmVBUGFydCA9IHRydWU7CgkJCQkJCXBwcy53aGF0RG9XZVdhbnQgPSAxOyAvLyBiYWNrIHRvIGdldHRpbmcgaGVhZGVycyBmb3IgdGhlIG5leHQgcGFydAoKCQkJCQkJY29tbWl0UGFydCgpOyAvLyB3ZSdyZSBkb25lIGhlcmUKCQkJCQl9IGVsc2UgewoJCQkJCQkvLyB3ZSBjYW4ndCBzZWUgdGhlIHdob2xlIHRoaW5nLCBidXQgd2hhdCBpZiB0aGVyZSdzIGEgcGFydGlhbCBib3VuZGFyeT8KCgkJCQkJCWVuZm9yY2UocHBzLmxvY2FsQm91bmRhcnkubGVuZ3RoIDwgMTI4KTsgLy8gdGhlIGJvdW5kYXJ5IG91Z2h0IHRvIGJlIGxlc3MgdGhhbiBhIGxpbmUuLi4KCQkJCQkJYXNzZXJ0KHBwcy5sb2NhbEJvdW5kYXJ5Lmxlbmd0aCA&#43;IDEpOyAvLyBzaG91bGQgYWxyZWFkeSBiZSBzYW5lIGJ1dCBqdXN0IGluIGNhc2UKCQkJCQkJYm9vbCBwb3RlbnRpYWxCb3VuZGFyeUZvdW5kID0gZmFsc2U7CgoJCQkJCQlib3VuZGFyeUNoZWNrOiBmb3IoaW50IGEgPSAxOyBhIDwgcHBzLmxvY2FsQm91bmRhcnkubGVuZ3RoOyBhKyspIHsKCQkJCQkJCS8vIHdlIGdyb3cgdGhlIGJvdW5kYXJ5IGEgYml0IGVhY2ggdGltZS4gSWYgd2UgdGhpbmsgaXQgbG9va3MgdGhlCgkJCQkJCQkvLyBzYW1lLCBiZXR0ZXIgcHVsbCBhbm90aGVyIGNodW5rIHRvIGJlIHN1cmUgaXQncyBub3QgdGhlIGVuZC4KCQkJCQkJCS8vIFN0YXJ0aW5nIHNtYWxsIGJlY2F1c2UgZXhpdGluZyB0aGUgbG9vcCBlYXJseSBpcyBkZXNpcmFibGUsIHNpbmNlCgkJCQkJCQkvLyB3ZSdyZSBub3Qga2VlcGluZyBhbnkgYW1iaWd1aXR5IGFuZCAxIC8gMjU2IGNoYW5jZSBvZiBleGl0aW5nIGlzCgkJCQkJCQkvLyB0aGUgYmVzdCB3ZSBjYW4gZG8uCgkJCQkJCQlpZihhID4gcHBzLmJ1ZmZlci5sZW5ndGgpCgkJCQkJCQkJYnJlYWs7IC8vIEZJWE1FOiBpcyB0aGlzIHJpZ2h0PwoJCQkJCQkJYXNzZXJ0KGEgPD0gcHBzLmJ1ZmZlci5sZW5ndGgpOwoJCQkJCQkJYXNzZXJ0KGEgPiAwKTsKCQkJCQkJCWlmKHN0ZC5hbGdvcml0aG0uZW5kc1dpdGgocHBzLmJ1ZmZlciwgcHBzLmxvY2FsQm91bmRhcnlbMCAuLiBhXSkpIHsKCQkJCQkJCQkvLyBvaywgdGhlcmUgKm1pZ2h0KiBiZSBhIGJvdW5kYXJ5IGhlcmUsIHNvIGxldCdzCgkJCQkJCQkJLy8gbm90IHRyZWF0IHRoZSBlbmQgYXMgZGF0YSB5ZXQuIFRoZSByZXN0IGlzIGdvb2QgdG8KCQkJCQkJCQkvLyB1c2UgdGhvdWdoLCBzaW5jZSBpZiB0aGVyZSB3YXMgYSBib3VuZGFyeSB0aGVyZSwgd2UnZAoJCQkJCQkJCS8vIGhhdmUgaGFuZGxlZCBpdCB1cCBhYm92ZSBhZnRlciBsb2NhdGlvbk9mLgoKCQkJCQkJCQlwcHMucGllY2UuY29udGVudCB&#43;PSBwcHMuYnVmZmVyWzAgLi4gJCAtIGFdOwoJCQkJCQkJCWNvbnN1bWUocHBzLmJ1ZmZlci5sZW5ndGggLSBhKTsKCQkJCQkJCQlwaWVjZUhhc05ld0NvbnRlbnQoKTsKCQkJCQkJCQlwb3RlbnRpYWxCb3VuZGFyeUZvdW5kID0gdHJ1ZTsKCQkJCQkJCQlicmVhayBib3VuZGFyeUNoZWNrOwoJCQkJCQkJfQoJCQkJCQl9CgoJCQkJCQlpZighcG90ZW50aWFsQm91bmRhcnlGb3VuZCkgewoJCQkJCQkJLy8gd2UgY2FuIGNvbnN1bWUgdGhlIHdob2xlIHRoaW5nCgkJCQkJCQlwcHMucGllY2UuY29udGVudCB&#43;&#43;IEJhc2U2NC5lbmNvZGUoY2FzdChpbW11dGFibGUodWJ5dGUpW10pICh1c2VyIH4gIjoiIH4gcGFzcykpKSB7CgkJCXNldFJlc3BvbnNlU3RhdHVzKCI0MDEgQXV0aG9yaXphdGlvbiBSZXF1aXJlZCIpOwoJCQloZWFkZXIgKCJXV1ctQXV0aGVudGljYXRlOiBCYXNpYyByZWFsbT1cIiJ&#43;bWVzc2FnZX4iXCIiKTsKCQkJY2xvc2UoKTsKCQkJdGhyb3cgbmV3IEV4Y2VwdGlvbigiTm90IGF1dGhvcml6ZWQ7IGdvdCAiIH4gYXV0aG9yaXphdGlvbik7CgkJfQoJfQoKCS8vLyBWZXJ5IHNpbXBsZSBjYWNoaW5nIGNvbnRyb2xzIC0gc2V0Q2FjaGUoZmFsc2UpIG1lYW5zIGl0IHdpbGwgbmV2ZXIgYmUgY2FjaGVkLiBHb29kIGZvciByYXBpZGx5IHVwZGF0ZWQgb3Igc2Vuc2l0aXZlIHNpdGVzLgoJLy8vIHNldENhY2hlKHRydWUpIG1lYW5zIGl0IHdpbGwgYWx3YXlzIGJlIGNhY2hlZCBmb3IgYXMgbG9uZyBhcyBwb3NzaWJsZS4gQmVzdCBmb3Igc3RhdGljIGNvbnRlbnQuCgkvLy8gVXNlIHNldFJlc3BvbnNlRXhwaXJlcyBhbmQgdXBkYXRlUmVzcG9uc2VFeHBpcmVzIGZvciBtb3JlIGNvbnRyb2wKCXZvaWQgc2V0Q2FjaGUoYm9vbCBhbGxvd0NhY2hpbmcpIHsKCQlub0NhY2hlID0gIWFsbG93Q2FjaGluZzsKCX0KCgkvLy8gU2V0IHRvIHRydWUgYW5kIHVzZSBjZ2kud3JpdGUoZGF0YSwgdHJ1ZSk7IHRvIHNlbmQgYSBnemlwcGVkIHJlc3BvbnNlIHRvIGJyb3dzZXJzCgkvLy8gd2hvIGNhbiBhY2NlcHQgaXQKCWJvb2wgZ3ppcFJlc3BvbnNlOwoKCWltbXV0YWJsZSBib29sIGFjY2VwdHNHemlwOwoJaW1tdXRhYmxlIGJvb2wga2VlcEFsaXZlUmVxdWVzdGVkOwoKCS8vLyBTZXQgdG8gdHJ1ZSBpZiBhbmQgb25seSBpZiB0aGlzIHdhcyBpbml0aWFsaXplZCB3aXRoIGNvbW1hbmQgbGluZSBhcmd1bWVudHMKCWltbXV0YWJsZSBib29sIGlzQ2FsbGVkV2l0aENvbW1hbmRMaW5lQXJndW1lbnRzOwoKCS8vLyBUaGlzIGdldHMgYSBmdWxsIHVybCBmb3IgdGhlIGN1cnJlbnQgcmVxdWVzdCwgaW5jbHVkaW5nIHBvcnQsIHByb3RvY29sLCBob3N0LCBwYXRoLCBhbmQgcXVlcnkKCXN0cmluZyBnZXRDdXJyZW50Q29tcGxldGVVcmkoKSBjb25zdCB7CgkJdXNob3J0IGRlZmF1bHRQb3J0ID0gaHR0cHMgPyA0NDMgOiA4MDsKCgkJcmV0dXJuIGZvcm1hdCgiaHR0cCVzOi8vJXMlcyVzIiwKCQkJaHR0cHMgPyAicyIgOiAiIiwKCQkJaG9zdCwKCQkJKCFwb3J0IHx8IHBvcnQgPT0gZGVmYXVsdFBvcnQpID8gIiIgOiAiOiIgfiB0byFzdHJpbmcocG9ydCksCgkJCXJlcXVlc3RVcmkpOwoJfQoKCS8vLyBZb3UgY2FuIG92ZXJyaWRlIHRoaXMgaWYgeW91ciBzaXRlIGJhc2UgdXJsIGlzbid0IHRoZSBzYW1lIGFzIHRoZSBzY3JpcHQgbmFtZQoJc3RyaW5nIGxvZ2ljYWxTY3JpcHROYW1lKCkgY29uc3QgewoJCXJldHVybiBzY3JpcHROYW1lOwoJfQoKCS8vLyBTZXRzIHRoZSBIVFRQIHN0YXR1cyBvZiB0aGUgcmVzcG9uc2UuIEZvciBleGFtcGxlLCAiNDA0IEZpbGUgTm90IEZvdW5kIiBvciAiNTAwIEludGVybmFsIFNlcnZlciBFcnJvciIuCgkvLy8gSXQgYXNzdW1lcyAiMjAwIE9LIiwgYW5kIGF1dG9tYXRpY2FsbHkgY2hhbmdlcyB0byAiMzAyIEZvdW5kIiBpZiB5b3UgY2FsbCBzZXRSZXNwb25zZUxvY2F0aW9uKCkuCgkvLy8gTm90ZSBzZXRSZXNwb25zZVN0YXR1cygpIG11c3QgYmUgY2FsbGVkICpiZWZvcmUqIHlvdSB3cml0ZSgpIGFueSBkYXRhIHRvIHRoZSBvdXRwdXQuCgl2b2lkIHNldFJlc3BvbnNlU3RhdHVzKHN0cmluZyBzdGF0dXMpIHsKCQlhc3NlcnQoIW91dHB1dHRlZFJlc3BvbnNlRGF0YSk7CgkJcmVzcG9uc2VTdGF0dXMgPSBzdGF0dXM7Cgl9Cglwcml2YXRlIHN0cmluZyByZXNwb25zZVN0YXR1cyA9IG51bGw7CgoJLy8vIFJldHVybnMgdHJ1ZSBpZiBpdCBpcyBzdGlsbCBwb3NzaWJsZSB0byBvdXRwdXQgaGVhZGVycwoJYm9vbCBjYW5PdXRwdXRIZWFkZXJzKCkgewoJCXJldHVybiAhaXNDbG9zZWQgJiYgIW91dHB1dHRlZFJlc3BvbnNlRGF0YTsKCX0KCgkvLy8gU2V0cyB0aGUgbG9jYXRpb24gaGVhZGVyLCB3aGljaCB0aGUgYnJvd3NlciB3aWxsIHJlZGlyZWN0IHRoZSB1c2VyIHRvIGF1dG9tYXRpY2FsbHkuCgkvLy8gTm90ZSBzZXRSZXNwb25zZUxvY2F0aW9uKCkgbXVzdCBiZSBjYWxsZWQgKmJlZm9yZSogeW91IHdyaXRlKCkgYW55IGRhdGEgdG8gdGhlIG91dHB1dC4KCS8vLyBUaGUgb3B0aW9uYWwgaW1wb3J0YW50IGFyZ3VtZW50IGlzIHVzZWQgaWYgaXQncyBhIGRlZmF1bHQgc3VnZ2VzdGlvbiByYXRoZXIgdGhhbiBzb21ldGhpbmcgdG8gaW5zaXN0IHVwb24uCgl2b2lkIHNldFJlc3BvbnNlTG9jYXRpb24oc3RyaW5nIHVyaSwgYm9vbCBpbXBvcnRhbnQgPSB0cnVlLCBzdHJpbmcgc3RhdHVzID0gbnVsbCkgewoJCWlmKCFpbXBvcnRhbnQgJiYgaXNDdXJyZW50UmVzcG9uc2VMb2NhdGlvbkltcG9ydGFudCkKCQkJcmV0dXJuOyAvLyBpbXBvcnRhbnQgcmVkaXJlY3RzIGFsd2F5cyBvdmVycmlkZSB1bmltcG9ydGFudCBvbmVzCgoJCWlmKHVyaSBpcyBudWxsKSB7CgkJCXJlc3BvbnNlU3RhdHVzID0gIjIwMCBPSyI7CgkJCXJlc3BvbnNlTG9jYXRpb24gPSBudWxsOwoJCQlpc0N1cnJlbnRSZXNwb25zZUxvY2F0aW9uSW1wb3J0YW50ID0gaW1wb3J0YW50OwoJCQlyZXR1cm47IC8vIHRoaXMganVzdCBjYW5jZWxzIHRoZSByZWRpcmVjdAoJCX0KCgkJYXNzZXJ0KCFvdXRwdXR0ZWRSZXNwb25zZURhdGEpOwoJCWlmKHN0YXR1cyBpcyBudWxsKQoJCQlyZXNwb25zZVN0YXR1cyA9ICIzMDIgRm91bmQiOwoJCWVsc2UKCQkJcmVzcG9uc2VTdGF0dXMgPSBzdGF0dXM7CgoJCXJlc3BvbnNlTG9jYXRpb24gPSB1cmkuc3RyaXA7CgkJaXNDdXJyZW50UmVzcG9uc2VMb2NhdGlvbkltcG9ydGFudCA9IGltcG9ydGFudDsKCX0KCXByb3RlY3RlZCBzdHJpbmcgcmVzcG9uc2VMb2NhdGlvbiA9IG51bGw7Cglwcml2YXRlIGJvb2wgaXNDdXJyZW50UmVzcG9uc2VMb2NhdGlvbkltcG9ydGFudCA9IGZhbHNlOwoKCS8vLyBTZXRzIHRoZSBFeHBpcmVzOiBodHRwIGhlYWRlci4gU2VlIGFsc286IHVwZGF0ZVJlc3BvbnNlRXhwaXJlcywgc2V0UHVibGljQ2FjaGluZwoJLy8vIFRoZSBwYXJhbWV0ZXIgaXMgaW4gdW5peF90aW1lc3RhbXAgKiAxMDAwLiBUcnkgc2V0UmVzcG9uc2VFeHBpcmVzKGdldFVUQ3RpbWUoKSArIFNPTUUgQU1PVU5UKSBmb3Igbm9ybWFsIHVzZS4KCS8vLyBOb3RlOiB0aGUgd2hlbiBwYXJhbWV0ZXIgaXMgZGlmZmVyZW50IHRoYW4gc2V0Q29va2llJ3MgZXhwaXJlIHBhcmFtZXRlci4KCXZvaWQgc2V0UmVzcG9uc2VFeHBpcmVzKGxvbmcgd2hlbiwgYm9vbCBpc1B1YmxpYyA9IGZhbHNlKSB7CgkJcmVzcG9uc2VFeHBpcmVzID0gd2hlbjsKCQlzZXRDYWNoZSh0cnVlKTsgLy8gbmVlZCB0byBlbmFibGUgY2FjaGluZyBzbyB0aGUgZGF0ZSBoYXMgbWVhbmluZwoKCQlyZXNwb25zZUlzUHVibGljID0gaXNQdWJsaWM7Cgl9Cglwcml2YXRlIGxvbmcgcmVzcG9uc2VFeHBpcmVzID0gbG9uZy5taW47Cglwcml2YXRlIGJvb2wgcmVzcG9uc2VJc1B1YmxpYyA9IGZhbHNlOwoKCS8vLyBUaGlzIGlzIGxpa2Ugc2V0UmVzcG9uc2VFeHBpcmVzLCBidXQgaXQgY2FuIGJlIGNhbGxlZCBtdWx0aXBsZSB0aW1lcy4gVGhlIHNldHRpbmcgbW9zdCBpbiB0aGUgcGFzdCBpcyB0aGUgb25lIGtlcHQuCgkvLy8gSWYgeW91IGhhdmUgbXVsdGlwbGUgZnVuY3Rpb25zLCB0aGV5IGFsbCBtaWdodCBjYWxsIHVwZGF0ZVJlc3BvbnNlRXhwaXJlcyBhYm91dCB0aGVpciBvd24gcmV0dXJuIHZhbHVlLiBUaGUgcHJvZ3JhbQoJLy8vIG91dHB1dCBhcyBhIHdob2xlIGlzIGFzIGNhY2hlYWJsZSBhcyB0aGUgbGVhc3QgY2FjaGFibGUgcGFydCBpbiB0aGUgY2hhaW4uCgoJLy8vIHNldENhY2hlKGZhbHNlKSBhbHdheXMgb3ZlcnJpZGVzIHRoaXMgLSBpdCBpcywgYnkgZGVmaW5pdGlvbiwgdGhlIHN0cmljdGVzdCBhbnRpLWNhY2hlIHN0YXRlbWVudCBhdmFpbGFibGUuIElmIHlvdXIgc2l0ZSBvdXRwdXRzIHNlbnNpdGl2ZSB1c2VyIGRhdGEsIHlvdSBzaG91bGQgcHJvYmFibHkgY2FsbCBzZXRDYWNoZShmYWxzZSkgd2hlbiB5b3UgZG8sIHRvIGVuc3VyZSBubyBvdGhlciBmdW5jdGlvbnMgd2lsbCBjYWNoZSB0aGUgY29udGVudCwgYXMgaXQgbWF5IGJlIGEgcHJpdmFjeSByaXNrLgoJLy8vIENvbnZlcnNlbHksIHNldHRpbmcgaGVyZSBvdmVycmlkZXMgc2V0Q2FjaGUodHJ1ZSksIHNpbmNlIGFueSBleHBpcmF0aW9uIGRhdGUgaXMgaW4gdGhlIHBhc3Qgb2YgaW5maW5pdHkuCgl2b2lkIHVwZGF0ZVJlc3BvbnNlRXhwaXJlcyhsb25nIHdoZW4sIGJvb2wgaXNQdWJsaWMpIHsKCQlpZihyZXNwb25zZUV4cGlyZXMgPT0gbG9uZy5taW4pCgkJCXNldFJlc3BvbnNlRXhwaXJlcyh3aGVuLCBpc1B1YmxpYyk7CgkJZWxzZSBpZih3aGVuIDwgcmVzcG9uc2VFeHBpcmVzKQoJCQlzZXRSZXNwb25zZUV4cGlyZXMod2hlbiwgcmVzcG9uc2VJc1B1YmxpYyAmJiBpc1B1YmxpYyk7IC8vIGlmIGFueSBwYXJ0IG9mIGl0IGlzIHByaXZhdGUsIGl0IGFsbCBpcwoJfQoKCS8qCgkvLy8gU2V0IHRvIHRydWUgaWYgeW91IHdhbnQgdGhlIHJlc3VsdCB0byBiZSBjYWNoZWQgcHVibGljYWxseSAtIHRoYXQgaXMsIGlzIHRoZSBjb250ZW50IHNoYXJlZD8KCS8vLyBTaG91bGQgZ2VuZXJhbGx5IGJlIGZhbHNlIGlmIHRoZSB1c2VyIGlzIGxvZ2dlZCBpbi4gSXQgYXNzdW1lcyBwcml2YXRlIGNhY2hlIG9ubHkuCgkvLy8gc2V0Q2FjaGUodHJ1ZSkgYWxzbyB0dXJucyBvbiBwdWJsaWMgY2FjaGluZywgYW5kIHNldENhY2hlKGZhbHNlKSBzZXRzIHRvIHByaXZhdGUuCgl2b2lkIHNldFB1YmxpY0NhY2hpbmcoYm9vbCBhbGxvd1B1YmxpY0NhY2hlcykgewoJCXB1YmxpY0NhY2hpbmcgPSBhbGxvd1B1YmxpY0NhY2hlczsKCX0KCXByaXZhdGUgYm9vbCBwdWJsaWNDYWNoaW5nID0gZmFsc2U7CgkqLwoKCS8vLyBTZXRzIGFuIEhUVFAgY29va2llLCBhdXRvbWF0aWNhbGx5IGVuY29kaW5nIHRoZSBkYXRhIHRvIHRoZSBjb3JyZWN0IHN0cmluZy4KCS8vLyBleHBpcmVzSW4gaXMgaG93IG1hbnkgbWlsbGlzZWNvbmRzIGluIHRoZSBmdXR1cmUgdGhlIGNvb2tpZSB3aWxsIGV4cGlyZS4KCS8vLyBUSVA6IHRvIG1ha2UgYSBjb29raWUgYWNjZXNzaWJsZSBmcm9tIHN1YmRvbWFpbnMsIHNldCB0aGUgZG9tYWluIHRvIC55b3VyZG9tYWluLmNvbS4KCS8vLyBOb3RlIHNldENvb2tpZSgpIG11c3QgYmUgY2FsbGVkICpiZWZvcmUqIHlvdSB3cml0ZSgpIGFueSBkYXRhIHRvIHRoZSBvdXRwdXQuCgl2b2lkIHNldENvb2tpZShzdHJpbmcgbmFtZSwgc3RyaW5nIGRhdGEsIGxvbmcgZXhwaXJlc0luID0gMCwgc3RyaW5nIHBhdGggPSBudWxsLCBzdHJpbmcgZG9tYWluID0gbnVsbCwgYm9vbCBodHRwT25seSA9IGZhbHNlLCBib29sIHNlY3VyZSA9IGZhbHNlKSB7CgkJYXNzZXJ0KCFvdXRwdXR0ZWRSZXNwb25zZURhdGEpOwoJCXN0cmluZyBjb29raWUgPSBzdGQudXJpLmVuY29kZUNvbXBvbmVudChuYW1lKSB&#43;ICI9IjsKCQljb29raWUgfj0gc3RkLnVyaS5lbmNvZGVDb21wb25lbnQoZGF0YSk7CgkJaWYocGF0aCAhaXMgbnVsbCkKCQkJY29va2llIH49ICI7IHBhdGg9IiB&#43;IHBhdGg7CgkJLy8gRklYTUU6IHNob3VsZCBJIGp1c3QgYmUgdXNpbmcgbWF4LWFnZSBoZXJlPyAoYWxzbyBpbiBjYWNoZSBiZWxvdykKCQlpZihleHBpcmVzSW4gIT0gMCkKCQkJY29va2llIH49ICI7IGV4cGlyZXM9IiB&#43;IHByaW50RGF0ZShjYXN0KERhdGVUaW1lKSBDbG9jay5jdXJyVGltZShVVEMoKSkgKyBkdXIhIm1zZWNzIihleHBpcmVzSW4pKTsKCQlpZihkb21haW4gIWlzIG51bGwpCgkJCWNvb2tpZSB&#43;PSAiOyBkb21haW49IiB&#43;IGRvbWFpbjsKCQlpZihzZWN1cmUgPT0gdHJ1ZSkKCQkJY29va2llIH49ICI7IFNlY3VyZSI7CgkJaWYoaHR0cE9ubHkgPT0gdHJ1ZSApCgkJCWNvb2tpZSB&#43;PSAiOyBIdHRwT25seSI7CgoJCWlmKGF1dG8gaWR4ID0gbmFtZSBpbiBjb29raWVJbmRleGVzKSB7CgkJCXJlc3BvbnNlQ29va2llc1sqaWR4XSA9IGNvb2tpZTsKCQl9IGVsc2UgewoJCQljb29raWVJbmRleGVzW25hbWVdID0gcmVzcG9uc2VDb29raWVzLmxlbmd0aDsKCQkJcmVzcG9uc2VDb29raWVzIH49IGNvb2tpZTsKCQl9Cgl9Cglwcml2YXRlIHN0cmluZ1tdIHJlc3BvbnNlQ29va2llczsKCXByaXZhdGUgc2l6ZV90W3N0cmluZ10gY29va2llSW5kZXhlczsKCgkvLy8gQ2xlYXJzIGEgcHJldmlvdXNseSBzZXQgY29va2llIHdpdGggdGhlIGdpdmVuIG5hbWUsIHBhdGgsIGFuZCBkb21haW4uCgl2b2lkIGNsZWFyQ29va2llKHN0cmluZyBuYW1lLCBzdHJpbmcgcGF0aCA9IG51bGwsIHN0cmluZyBkb21haW4gPSBudWxsKSB7CgkJYXNzZXJ0KCFvdXRwdXR0ZWRSZXNwb25zZURhdGEpOwoJCXNldENvb2tpZShuYW1lLCAiIiwgMSwgcGF0aCwgZG9tYWluKTsKCX0KCgkvLy8gU2V0cyB0aGUgY29udGVudCB0eXBlIG9mIHRoZSByZXNwb25zZSwgZm9yIGV4YW1wbGUgInRleHQvaHRtbCIgKHRoZSBkZWZhdWx0KSBmb3IgSFRNTCwgb3IgImltYWdlL3BuZyIgZm9yIGEgUE5HIGltYWdlCgl2b2lkIHNldFJlc3BvbnNlQ29udGVudFR5cGUoc3RyaW5nIGN0KSB7CgkJYXNzZXJ0KCFvdXRwdXR0ZWRSZXNwb25zZURhdGEpOwoJCXJlc3BvbnNlQ29udGVudFR5cGUgPSBjdDsKCX0KCXByaXZhdGUgc3RyaW5nIHJlc3BvbnNlQ29udGVudFR5cGUgPSBudWxsOwoKCS8vLyBBZGRzIGEgY3VzdG9tIGhlYWRlci4gSXQgc2hvdWxkIGJlIHRoZSBuYW1lOiB2YWx1ZSwgYnV0IHdpdGhvdXQgYW55IGxpbmUgdGVybWluYXRvci4KCS8vLyBGb3IgZXhhbXBsZTogaGVhZGVyKCJYLU15LUhlYWRlcjogU29tZSB2YWx1ZSIpOwoJLy8vIE5vdGUgeW91IHNob3VsZCB1c2UgdGhlIHNwZWNpYWxpemVkIGZ1bmN0aW9ucyBpbiB0aGlzIG9iamVjdCBpZiBwb3NzaWJsZSB0byBhdm9pZAoJLy8vIGR1cGxpY2F0ZXMgaW4gdGhlIG91dHB1dC4KCXZvaWQgaGVhZGVyKHN0cmluZyBoKSB7CgkJY3VzdG9tSGVhZGVycyB&#43;PSBoOwoJfQoKCXByaXZhdGUgc3RyaW5nW10gY3VzdG9tSGVhZGVyczsKCXByaXZhdGUgYm9vbCB3ZWJzb2NrZXRNb2RlOwoKCXZvaWQgZmx1c2hIZWFkZXJzKGNvbnN0KHZvaWQpW10gdCwgYm9vbCBpc0FsbCA9IGZhbHNlKSB7CgkJc3RyaW5nW10gaGQ7CgkJLy8gRmx1c2ggdGhlIGhlYWRlcnMKCQlpZihyZXNwb25zZVN0YXR1cyAhaXMgbnVsbCkgewoJCQlpZihucGgpIHsKCQkJCWlmKGh0dHAxMCkKCQkJCQloZCB&#43;PSAiSFRUUC8xLjAgIiB&#43;IHJlc3BvbnNlU3RhdHVzOwoJCQkJZWxzZQoJCQkJCWhkIH49ICJIVFRQLzEuMSAiIH4gcmVzcG9uc2VTdGF0dXM7CgkJCX0gZWxzZQoJCQkJaGQgfj0gIlN0YXR1czogIiB&#43;IHJlc3BvbnNlU3RhdHVzOwoJCX0gZWxzZSBpZiAobnBoKSB7CgkJCWlmKGh0dHAxMCkKCQkJCWhkIH49ICJIVFRQLzEuMCAyMDAgT0siOwoJCQllbHNlCgkJCQloZCB&#43;PSAiSFRUUC8xLjEgMjAwIE9LIjsKCQl9CgoJCWlmKHdlYnNvY2tldE1vZGUpCgkJCWdvdG8gd2Vic29ja2V0OwoKCQlpZihucGgpIHsgLy8gd2UncmUgcmVzcG9uc2libGUgZm9yIHNldHRpbmcgdGhlIGRhdGUgdG9vIGFjY29yZGluZyB0byBodHRwIDEuMQoJCQloZCB&#43;PSAiRGF0ZTogIiB&#43;IHByaW50RGF0ZShjYXN0KERhdGVUaW1lKSBDbG9jay5jdXJyVGltZShVVEMoKSkpOwoJCX0KCgkJLy8gRklYTUU6IHdoYXQgaWYgdGhlIHVzZXIgd2FudHMgdG8gc2V0IGhpcyBvd24gY29udGVudC1sZW5ndGg/CgkJLy8gVGhlIGN1c3RvbSBoZWFkZXIgZnVuY3Rpb24gY2FuIGRvIGl0LCBzbyBtYXliZSB0aGF0J3MgYmVzdC4KCQkvLyBPciB3ZSBjb3VsZCByZXVzZSB0aGUgaXNBbGwgcGFyYW0uCgkJaWYocmVzcG9uc2VMb2NhdGlvbiAhaXMgbnVsbCkgewoJCQloZCB&#43;PSAiTG9jYXRpb246ICIgfiByZXNwb25zZUxvY2F0aW9uOwoJCX0KCQlpZighbm9DYWNoZSAmJiByZXNwb25zZUV4cGlyZXMgIT0gbG9uZy5taW4pIHsgLy8gYW4gZXhwbGljaXQgZXhwaXJhdGlvbiBkYXRlIGlzIHNldAoJCQlhdXRvIGV4cGlyZXMgPSBTeXNUaW1lKHVuaXhUaW1lVG9TdGRUaW1lKGNhc3QoaW50KShyZXNwb25zZUV4cGlyZXMgLyAxMDAwKSksIFVUQygpKTsKCQkJaGQgfj0gIkV4cGlyZXM6ICIgfiBwcmludERhdGUoCgkJCQljYXN0KERhdGVUaW1lKSBleHBpcmVzKTsKCQkJLy8gRklYTUU6IGFzc3VtaW5nIGV2ZXJ5dGhpbmcgaXMgcHJpdmF0ZSB1bmxlc3MgeW91IHVzZSBub2NhY2hlIC0gZ2VuZXJhbGx5IHJpZ2h0IGZvciBkeW5hbWljIHBhZ2VzLCBidXQgbm90IG5lY2Vzc2FyaWx5CgkJCWhkIH49ICJDYWNoZS1Db250cm9sOiAifihyZXNwb25zZUlzUHVibGljID8gInB1YmxpYyIgOiAicHJpdmF0ZSIpfiIsIG5vLWNhY2hlPVwic2V0LWNvb2tpZSwgc2V0LWNvb2tpZTJcIiI7CgkJfQoJCWlmKHJlc3BvbnNlQ29va2llcyAhaXMgbnVsbCAmJiByZXNwb25zZUNvb2tpZXMubGVuZ3RoID4gMCkgewoJCQlmb3JlYWNoKGM7IHJlc3BvbnNlQ29va2llcykKCQkJCWhkIH49ICJTZXQtQ29va2llOiAiIH4gYzsKCQl9CgkJaWYobm9DYWNoZSkgeyAvLyB3ZSBzcGVjaWZpY2FsbHkgZG8gbm90IHdhbnQgY2FjaGluZyAodGhpcyBpcyBhY3R1YWxseSB0aGUgZGVmYXVsdCkKCQkJaGQgfj0gIkNhY2hlLUNvbnRyb2w6IHByaXZhdGUsIG5vLWNhY2hlPVwic2V0LWNvb2tpZVwiIjsKCQkJaGQgfj0gIkV4cGlyZXM6IDAiOwoJCQloZCB&#43;PSAiUHJhZ21hOiBuby1jYWNoZSI7CgkJfSBlbHNlIHsKCQkJaWYocmVzcG9uc2VFeHBpcmVzID09IGxvbmcubWluKSB7IC8vIGNhY2hpbmcgd2FzIGVuYWJsZWQsIGJ1dCB3aXRob3V0IGEgZGF0ZSBzZXQgLSB0aGF0IG1lYW5zIGFzc3VtZSBjYWNoZSBmb3JldmVyCgkJCQloZCB&#43;PSAiQ2FjaGUtQ29udHJvbDogcHVibGljIjsKCQkJCWhkIH49ICJFeHBpcmVzOiBUdWUsIDMxIERlYyAyMDMwIDE0OjAwOjAwIEdNVCI7IC8vIEZJWE1FOiBzaG91bGQgbm90IGJlIG1vcmUgdGhhbiBvbmUgeWVhciBpbiB0aGUgZnV0dXJlCgkJCX0KCQl9CgkJaWYocmVzcG9uc2VDb250ZW50VHlwZSAhaXMgbnVsbCkgewoJCQloZCB&#43;PSAiQ29udGVudC1UeXBlOiAiIH4gcmVzcG9uc2VDb250ZW50VHlwZTsKCQl9IGVsc2UKCQkJaGQgfj0gIkNvbnRlbnQtVHlwZTogdGV4dC9odG1sOyBjaGFyc2V0PXV0Zi04IjsKCgkJaWYoZ3ppcFJlc3BvbnNlICYmIGFjY2VwdHNHemlwICYmIGlzQWxsKSB7IC8vIEZJWE1FOiBpc0FsbCByZWFsbHkgc2hvdWxkbid0IGJlIG5lY2Vzc2FyeQoJCQloZCB&#43;PSAiQ29udGVudC1FbmNvZGluZzogZ3ppcCI7CgkJfQoKCgkJaWYoIWlzQWxsKSB7CgkJCWlmKG5waCAmJiAhaHR0cDEwKSB7CgkJCQloZCB&#43;PSAiVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWQiOwoJCQkJcmVzcG9uc2VDaHVua2VkID0gdHJ1ZTsKCQkJfQoJCX0gZWxzZSB7CgkJCWhkIH49ICJDb250ZW50LUxlbmd0aDogIiB&#43;IHRvIXN0cmluZyh0Lmxlbmd0aCk7CgkJCWlmKG5waCAmJiBrZWVwQWxpdmVSZXF1ZXN0ZWQpIHsKCQkJCWhkIH49ICJDb25uZWN0aW9uOiBLZWVwLUFsaXZlIjsKCQkJfQoJCX0KCgkJd2Vic29ja2V0OgoJCWlmKGN1c3RvbUhlYWRlcnMgIWlzIG51bGwpCgkJCWhkIH49IGN1c3RvbUhlYWRlcnM7CgoJCS8vIEZJWE1FOiB3aGF0IGFib3V0IGR1cGxpY2F0ZWQgaGVhZGVycz8KCgkJZm9yZWFjaChoOyBoZCkgewoJCQlpZihyYXdEYXRhT3V0cHV0ICFpcyBudWxsKQoJCQkJcmF3RGF0YU91dHB1dChjYXN0KGNvbnN0KHVieXRlKVtdKSAoaCB&#43;ICJcclxuIikpOwoJCQllbHNlCgkJCQl3cml0ZWxuKGgpOwoJCX0KCQlpZihyYXdEYXRhT3V0cHV0ICFpcyBudWxsKQoJCQlyYXdEYXRhT3V0cHV0KGNhc3QoY29uc3QodWJ5dGUpW10pICgiXHJcbiIpKTsKCQllbHNlCgkJCXdyaXRlbG4oIiIpOwoKCQlvdXRwdXR0ZWRSZXNwb25zZURhdGEgPSB0cnVlOwoJfQoKCS8vLyBXcml0ZXMgdGhlIGRhdGEgdG8gdGhlIG91dHB1dCwgZmx1c2hpbmcgaGVhZGVycyBpZiB0aGV5IGhhdmUgbm90IHlldCBiZWVuIHNlbnQuCgl2b2lkIHdyaXRlKGNvbnN0KHZvaWQpW10gdCwgYm9vbCBpc0FsbCA9IGZhbHNlLCBib29sIG1heWJlQXV0b0Nsb3NlID0gdHJ1ZSkgewoJCWFzc2VydCghY2xvc2VkLCAiT3V0cHV0IGhhcyBhbHJlYWR5IGJlZW4gY2xvc2VkIik7CgoJCWlmKGd6aXBSZXNwb25zZSAmJiBhY2NlcHRzR3ppcCAmJiBpc0FsbCkgeyAvLyBGSVhNRTogaXNBbGwgcmVhbGx5IHNob3VsZG4ndCBiZSBuZWNlc3NhcnkKCQkJLy8gYWN0dWFsbHkgZ3ppcCB0aGUgZGF0YSBoZXJlCgoJCQlhdXRvIGMgPSBuZXcgQ29tcHJlc3MoSGVhZGVyRm9ybWF0Lmd6aXApOyAvLyB3YW50IGd6aXAKCgkJCWF1dG8gZGF0YSA9IGMuY29tcHJlc3ModCk7CgkJCWRhdGEgfj0gYy5mbHVzaCgpOwoKCQkJLy8gc3RkLmZpbGUud3JpdGUoIi90bXAvbGFzdC1pdGVtIiwgZGF0YSk7CgoJCQl0ID0gZGF0YTsKCQl9CgoJCWlmKCFvdXRwdXR0ZWRSZXNwb25zZURhdGEgJiYgKCFhdXRvQnVmZmVyIHx8IGlzQWxsKSkgewoJCQlmbHVzaEhlYWRlcnModCwgaXNBbGwpOwoJCX0KCgkJaWYocmVxdWVzdE1ldGhvZCAhPSBSZXF1ZXN0TWV0aG9kLkhFQUQgJiYgdC5sZW5ndGggPiAwKSB7CgkJCWlmIChhdXRvQnVmZmVyKSB7CgkJCQlvdXRwdXRCdWZmZXIgfj0gY2FzdCh1Ynl0ZVtdKSB0OwoJCQl9CgkJCWlmKCFhdXRvQnVmZmVyIHx8IGlzQWxsKSB7CgkJCQlpZihyYXdEYXRhT3V0cHV0ICFpcyBudWxsKQoJCQkJCWlmKG5waCAmJiByZXNwb25zZUNodW5rZWQpIHsKCQkJCQkJLy9yYXdEYXRhT3V0cHV0KG1ha2VDaHVuayhjYXN0KGNvbnN0KHVieXRlKVtdKSB0KSk7CgkJCQkJCS8vIHdlJ3JlIG1ha2luZyB0aGUgY2h1bmsgaGVyZSBpbnN0ZWFkIG9mIGluIGEgZnVuY3Rpb24KCQkJCQkJLy8gdG8gYXZvaWQgdW5uZWVkZWQgZ2MgcHJlc3N1cmUKCQkJCQkJcmF3RGF0YU91dHB1dChjYXN0KGNvbnN0KHVieXRlKVtdKSB0b0hleCh0Lmxlbmd0aCkpOwoJCQkJCQlyYXdEYXRhT3V0cHV0KGNhc3QoY29uc3QodWJ5dGUpW10pICJcclxuIik7CgkJCQkJCXJhd0RhdGFPdXRwdXQoY2FzdChjb25zdCh1Ynl0ZSlbXSkgdCk7CgkJCQkJCXJhd0RhdGFPdXRwdXQoY2FzdChjb25zdCh1Ynl0ZSlbXSkgIlxyXG4iKTsKCgoJCQkJCX0gZWxzZSB7CgkJCQkJCXJhd0RhdGFPdXRwdXQoY2FzdChjb25zdCh1Ynl0ZSlbXSkgdCk7CgkJCQkJfQoJCQkJZWxzZQoJCQkJCXN0ZG91dC5yYXdXcml0ZSh0KTsKCQkJfQoJCX0KCgkJaWYobWF5YmVBdXRvQ2xvc2UgJiYgaXNBbGwpCgkJCWNsb3NlKCk7IC8vIGlmIHlvdSBzYXkgaXQgaXMgYWxsLCB0aGF0IG1lYW5zIHdlJ3JlIGRlZmluaXRlbHkgZG9uZQoJCQkJLy8gbWF5YmVBdXRvQ2xvc2UgY2FuIGJlIGZhbHNlIHRob3VnaCB0byBhdm9pZCB0aGlzIChpbXBvcnRhbnQgaWYgeW91IGNhbGwgZnJvbSBpbnNpZGUgY2xvc2UoKSEKCX0KCgl2b2lkIGZsdXNoKCkgewoJCWlmKHJhd0RhdGFPdXRwdXQgaXMgbnVsbCkKCQkJc3Rkb3V0LmZsdXNoKCk7CgkJZWxzZSBpZihmbHVzaERlbGVnYXRlICFpcyBudWxsKQoJCQlmbHVzaERlbGVnYXRlKCk7Cgl9CgoJdmVyc2lvbihhdXRvQnVmZmVyKQoJCWJvb2wgYXV0b0J1ZmZlciA9IHRydWU7CgllbHNlCgkJYm9vbCBhdXRvQnVmZmVyID0gZmFsc2U7Cgl1Ynl0ZVtdIG91dHB1dEJ1ZmZlcjsKCgkvLy8gRmx1c2hlcyB0aGUgYnVmZmVycyB0byB0aGUgbmV0d29yaywgc2lnbmlmeWluZyB0aGF0IHlvdSBhcmUgZG9uZS4KCS8vLyBZb3Ugc2hvdWxkIGFsd2F5cyBjYWxsIHRoaXMgZXhwbGljaXRseSB3aGVuIHlvdSBhcmUgZG9uZSBvdXRwdXR0aW5nIGRhdGEuCgl2b2lkIGNsb3NlKCkgewoJCWlmKGNsb3NlZCkKCQkJcmV0dXJuOyAvLyBkb24ndCBkb3VibGUgY2xvc2UKCgkJaWYoIW91dHB1dHRlZFJlc3BvbnNlRGF0YSkKCQkJd3JpdGUoIiIsIGZhbHNlLCBmYWxzZSk7CgoJCS8vIHdyaXRpbmcgYXV0byBidWZmZXJlZCBkYXRhCgkJaWYocmVxdWVzdE1ldGhvZCAhPSBSZXF1ZXN0TWV0aG9kLkhFQUQgJiYgYXV0b0J1ZmZlcikgewoJCQlpZighbnBoKQoJCQkJc3Rkb3V0LnJhd1dyaXRlKG91dHB1dEJ1ZmZlcik7CgkJCWVsc2UKCQkJCXdyaXRlKG91dHB1dEJ1ZmZlciwgdHJ1ZSwgZmFsc2UpOyAvLyB0ZWxsIGl0IHRoaXMgaXMgZXZlcnl0aGluZwoJCX0KCgkJLy8gY2xvc2luZyB0aGUgbGFzdCBjaHVuay4uLgoJCWlmKG5waCAmJiByYXdEYXRhT3V0cHV0ICFpcyBudWxsICYmIHJlc3BvbnNlQ2h1bmtlZCkKCQkJcmF3RGF0YU91dHB1dChjYXN0KGNvbnN0KHVieXRlKVtdKSAiMFxyXG5cclxuIik7CgoJCWlmKGZsdXNoRGVsZWdhdGUpCgkJCWZsdXNoRGVsZWdhdGUoKTsKCgkJY2xvc2VkID0gdHJ1ZTsKCX0KCgkvLyBDbG9zZXMgd2l0aG91dCBkb2luZyBhbnl0aGluZywgc2hvdWxkbid0IGJlIHVzZWQgb2Z0ZW4KCXZvaWQgcmF3Q2xvc2UoKSB7CgkJY2xvc2VkID0gdHJ1ZTsKCX0KCgkvKysKCQlHZXRzIGEgcmVxdWVzdCB2YXJpYWJsZSBhcyBhIHNwZWNpZmljIHR5cGUsIG9yIHRoZSBkZWZhdWx0IHZhbHVlIG9mIGl0IGlzbid0IHRoZXJlCgkJb3IgaXNuJ3QgY29udmVydGlibGUgdG8gdGhlIHJlcXVlc3QgdHlwZS4KCQkKCQlDaGVja3MgYm90aCBHRVQgYW5kIFBPU1QgdmFyaWFibGVzLCBwcmVmZXJyaW5nIHRoZSBQT1NUIHZhcmlhYmxlLCBpZiBhdmFpbGFibGUuCgoJCUEgbmljZSB0cmljayBpcyB1c2luZyB0aGUgZGVmYXVsdCB2YWx1ZSB0byBjaG9vc2UgdGhlIHR5cGU6CgoJCS0tLQoJCQkvKgoJCQkJVGhlIHJldHVybiB2YWx1ZSB3aWxsIG1hdGNoIHRoZSB0eXBlIG9mIHRoZSBkZWZhdWx0LgoJCQkJSGVyZSwgSSBnYXZlIDEwIGFzIGEgZGVmYXVsdCwgc28gdGhlIHJldHVybiB2YWx1ZSB3aWxsCgkJCQliZSBhbiBpbnQuCgoJCQkJSWYgdGhlIHVzZXItc3VwcGxpZWQgdmFsdWUgY2Fubm90IGJlIGNvbnZlcnRlZCB0byB0aGUKCQkJCXJlcXVlc3RlZCB0eXBlLCB5b3Ugd2lsbCBnZXQgdGhlIGRlZmF1bHQgdmFsdWUgYmFjay4KCQkJKi8KCQkJaW50IGEgPSBjZ2kucmVxdWVzdCgibnVtYmVyIiwgMTApOwoKCQkJaWYoY2dpLmdldFsibnVtYmVyIl0gPT0gIjExIikKCQkJCWFzc2VydChhID09IDExKTsgLy8gY29udmVyc2lvbiBzdWNjZWVkcwoKCQkJaWYoIm51bWJlciIgIWluIGNnaS5nZXQpCgkJCQlhc3NlcnQoYSA9PSAxMCk7IC8vIG5vIHZhbHVlIG1lYW5zIHlvdSBjYW4ndCBjb252ZXJ0IC0gZ2l2ZSB0aGUgZGVmYXVsdAoKCQkJaWYoY2dpLmdldFsibnVtYmVyIl0gPT0gInR3ZWx2ZSIpCgkJCQlhc3NlcnQoYSA9PSAxMCk7IC8vIGNvbnZlcnNpb24gZnJvbSBzdHJpbmcgdG8gaW50IHdvdWxkIGZhaWwsIHNvIHdlIGdldCB0aGUgZGVmYXVsdAoJCS0tLQoKCQlZb3UgY2FuIHVzZSBhbiBlbnVtIGFzIGFuIGVhc3kgd2hpdGVsaXN0LCB0b286CgoJCS0tLQoJCQllbnVtIE9wZXJhdGlvbnMgewoJCQkJYWRkLCByZW1vdmUsIHF1ZXJ5CgkJCX0KCgkJCWF1dG8gb3AgPSBjZ2kucmVxdWVzdCgib3AiLCBPcGVyYXRpb25zLnF1ZXJ5KTsKCgkJCWlmKGNnaS5nZXRbIm9wIl0gPT0gImFkZCIpCgkJCQlhc3NlcnQob3AgPT0gT3BlcmF0aW9ucy5hZGQpOwoJCQlpZihjZ2kuZ2V0WyJvcCJdID09ICJyZW1vdmUiKQoJCQkJYXNzZXJ0KG9wID09IE9wZXJhdGlvbnMucmVtb3ZlKTsKCQkJaWYoY2dpLmdldFsib3AiXSA9PSAicXVlcnkiKQoJCQkJYXNzZXJ0KG9wID09IE9wZXJhdGlvbnMucXVlcnkpOwoKCQkJaWYoY2dpLmdldFsib3AiXSA9PSAicmFuZG9tIHN0cmluZyIpCgkJCQlhc3NlcnQob3AgPT0gT3BlcmF0aW9ucy5xdWVyeSk7IC8vIHRoZSB2YWx1ZSBjYW4ndCBiZSBjb252ZXJ0ZWQgdG8gdGhlIGVudW0sIHNvIHdlIGdldCB0aGUgZGVmYXVsdAoJCS0tLQoJKy8KCVQgcmVxdWVzdChUID0gc3RyaW5nKShpbiBzdHJpbmcgbmFtZSwgaW4gVCBkZWYgPSBULmluaXQpIGNvbnN0IG5vdGhyb3cgewoJCXRyeSB7CgkJCXJldHVybgoJCQkJKG5hbWUgaW4gcG9zdCkgPyB0byFUKHBvc3RbbmFtZV0pIDoKCQkJCShuYW1lIGluIGdldCkgID8gdG8hVChnZXRbbmFtZV0pIDoKCQkJCWRlZjsKCQl9IGNhdGNoKEV4Y2VwdGlvbiBlKSB7IHJldHVybiBkZWY7IH0KCX0KCgkvLy8gSXMgdGhlIG91dHB1dCBhbHJlYWR5IGNsb3NlZD8KCWJvb2wgaXNDbG9zZWQoKSBjb25zdCB7CgkJcmV0dXJuIGNsb3NlZDsKCX0KCgkvKiBIb29rcyBmb3IgcmVkaXJlY3RpbmcgaW5wdXQgYW5kIG91dHB1dCAqLwoJcHJpdmF0ZSB2b2lkIGRlbGVnYXRlKGNvbnN0KHVieXRlKVtdKSByYXdEYXRhT3V0cHV0ID0gbnVsbDsKCXByaXZhdGUgdm9pZCBkZWxlZ2F0ZSgpIGZsdXNoRGVsZWdhdGUgPSBudWxsOwoKCS8qIFRoaXMgaW5mbyBpcyB1c2VkIHdoZW4gaGFuZGxpbmcgYSBtb3JlIHJhdyBIVFRQIHByb3RvY29sICovCglwcml2YXRlIGJvb2wgbnBoOwoJcHJpdmF0ZSBib29sIGh0dHAxMDsKCXByaXZhdGUgYm9vbCBjbG9zZWQ7Cglwcml2YXRlIGJvb2wgcmVzcG9uc2VDaHVua2VkID0gZmFsc2U7CgoJdmVyc2lvbihwcmVzZXJ2ZURhdGEpIC8vIG5vdGU6IHRoaXMgY2FuIGVhdCBsb3RzIG9mIG1lbW9yeTsgZG9uJ3QgdXNlIHVubGVzcyB5b3UncmUgc3VyZSB5b3UgbmVlZCBpdC4KCWltbXV0YWJsZSh1Ynl0ZSlbXSBvcmlnaW5hbFBvc3REYXRhOwoKCXB1YmxpYyBpbW11dGFibGUgc3RyaW5nIHBvc3RKc29uOwoKCS8qIEludGVybmFsIHN0YXRlIGZsYWdzICovCglwcml2YXRlIGJvb2wgb3V0cHV0dGVkUmVzcG9uc2VEYXRhOwoJcHJpdmF0ZSBib29sIG5vQ2FjaGUgPSB0cnVlOwoKCWNvbnN0KHN0cmluZ1tzdHJpbmddKSBlbnZpcm9ubWVudFZhcmlhYmxlczsKCgkvKiogV2hhdCBmb2xsb3dzIGlzIGRhdGEgZ290dGVuIGZyb20gdGhlIEhUVFAgcmVxdWVzdC4gSXQgaXMgYWxsIGZ1bGx5IGltbXV0YWJsZSwKCSAgICBwYXJ0aWFsbHkgYmVjYXVzZSBpdCBsb2dpY2FsbHkgaXMgKHlvdXIgY29kZSBkb2Vzbid0IGNoYW5nZSB3aGF0IHRoZSB1c2VyIHJlcXVlc3RlZC4uLikKCSAgICBhbmQgcGFydGlhbGx5IGJlY2F1c2UgSSBoYXRlIGhvdyBiYWQgcHJvZ3JhbXMgaW4gUEhQIGNoYW5nZSB0aG9zZSBzdXBlcmdsb2JhbHMgdG8gZG8KCSAgICBhbGwga2luZHMgb2YgaGFyZCB0byBmb2xsb3cgdWdsaW5lc3MuIEkgZG9uJ3Qgd2FudCB0aGF0IHRvIGV2ZXIgaGFwcGVuIGluIEQuCgoJICAgIEZvciBzb21lIG9mIHRoZXNlLCB5b3UnbGwgd2FudCB0byByZWZlciB0byB0aGUgaHR0cCBvciBjZ2kgc3BlY3MgZm9yIG1vcmUgZGV0YWlscy4KCSovCglpbW11dGFibGUoc3RyaW5nW3N0cmluZ10pIHJlcXVlc3RIZWFkZXJzOyAvLy8gQWxsIHRoZSByYXcgaGVhZGVycyBpbiB0aGUgcmVxdWVzdCBhcyBuYW1lL3ZhbHVlIHBhaXJzLiBUaGUgbmFtZSBpcyBzdG9yZWQgYXMgYWxsIGxvd2VyIGNhc2UsIGJ1dCBvdGhlcndpc2UgdGhlIHNhbWUgYXMgaXQgaXMgaW4gSFRUUDsgd29yZHMgc2VwYXJhdGVkIGJ5IGRhc2hlcy4gRm9yIGV4YW1wbGUsICJjb29raWUiIG9yICJhY2NlcHQtZW5jb2RpbmciLiBNYW55IEhUVFAgaGVhZGVycyBoYXZlIHNwZWNpYWxpemVkIHZhcmlhYmxlcyBiZWxvdyBmb3IgbW9yZSBjb252ZW5pZW5jZSBhbmQgc3RhdGljIG5hbWUgY2hlY2tpbmc7IHlvdSBzaG91bGQgZ2VuZXJhbGx5IHRyeSB0byB1c2UgdGhlbS4KCglpbW11dGFibGUoY2hhcltdKSBob3N0OyAJLy8vIFRoZSBob3N0bmFtZSBpbiB0aGUgcmVxdWVzdC4gSWYgb25lIHByb2dyYW0gc2VydmVzIG11bHRpcGxlIGRvbWFpbnMsIHlvdSBjYW4gdXNlIHRoaXMgdG8gZGlmZmVyZW50aWF0ZSBiZXR3ZWVuIHRoZW0uCglpbW11dGFibGUoY2hhcltdKSBvcmlnaW47IAkvLy8gVGhlIG9yaWdpbiBoZWFkZXIgaW4gdGhlIHJlcXVlc3QsIGlmIHByZXNlbnQuIFNvbWUgSFRNTDUgY3Jvc3MtZG9tYWluIGFwaXMgc2V0IHRoaXMgYW5kIHlvdSBzaG91bGQgY2hlY2sgaXQgb24gdGhvc2UgY3Jvc3MgZG9tYWluIHJlcXVlc3RzIGFuZCB3ZWJzb2NrZXRzLgoJaW1tdXRhYmxlKGNoYXJbXSkgdXNlckFnZW50OyAJLy8vIFRoZSBicm93c2VyJ3MgdXNlci1hZ2VudCBzdHJpbmcuIENhbiBiZSB1c2VkIHRvIGlkZW50aWZ5IHRoZSBicm93c2VyLgoJaW1tdXRhYmxlKGNoYXJbXSkgcGF0aEluZm87IAkvLy8gVGhpcyBpcyBhbnkgc3R1ZmYgc2VudCBhZnRlciB5b3VyIHByb2dyYW0ncyBuYW1lIG9uIHRoZSB1cmwsIGJ1dCBiZWZvcmUgdGhlIHF1ZXJ5IHN0cmluZy4gRm9yIGV4YW1wbGUsIHN1cHBvc2UgeW91ciBwcm9ncmFtIGlzIG5hbWVkICJhcHAiLiBJZiB0aGUgdXNlciBnb2VzIHRvIHNpdGUuY29tL2FwcCwgcGF0aEluZm8gaXMgZW1wdHkuIEJ1dCwgaGUgY2FuIGFsc28gZ28gdG8gc2l0ZS5jb20vYXBwL3NvbWUvc3ViL3BhdGg7IHRyZWF0aW5nIHlvdXIgcHJvZ3JhbSBsaWtlIGEgdmlydHVhbCBmb2xkZXIuIEluIHRoaXMgY2FzZSwgcGF0aEluZm8gPT0gIi9zb21lL3N1Yi9wYXRoIi4KCWltbXV0YWJsZShjaGFyW10pIHNjcmlwdE5hbWU7ICAgLy8vIFRoZSBmdWxsIGJhc2UgcGF0aCBvZiB5b3VyIHByb2dyYW0sIGFzIHNlZW4gYnkgdGhlIHVzZXIuIElmIHlvdXIgcHJvZ3JhbSBpcyBsb2NhdGVkIGF0IHNpdGUuY29tL3Byb2dyYW1zL2FwcHMsIHNjcmlwdE5hbWUgPT0gIi9wcm9ncmFtcy9hcHBzIi4KCWltbXV0YWJsZShjaGFyW10pIHNjcmlwdEZpbGVOYW1lOyAgIC8vLyBUaGUgcGh5c2ljYWwgZmlsZW5hbWUgb2YgeW91ciBzY3JpcHQKCWltbXV0YWJsZShjaGFyW10pIGF1dGhvcml6YXRpb247IC8vLyBUaGUgZnVsbCBhdXRob3JpemF0aW9uIHN0cmluZyBmcm9tIHRoZSBoZWFkZXIsIHVuZGlnZXN0ZWQuIFVzZWZ1bCBmb3IgaW1wbGVtZW50aW5nIGF1dGggc2NoZW1lcyBzdWNoIGFzIE9BdXRoIDEuMC4gTm90ZSB0aGF0IHNvbWUgd2ViIHNlcnZlcnMgZG8gbm90IGZvcndhcmQgdGhpcyB0byB0aGUgYXBwIHdpdGhvdXQgdGFraW5nIGV4dHJhIHN0ZXBzLiBTZWUgcmVxdWlyZUJhc2ljQXV0aCdzIGNvbW1lbnQgZm9yIG1vcmUgaW5mby4KCWltbXV0YWJsZShjaGFyW10pIGFjY2VwdDsgCS8vLyBUaGUgSFRUUCBhY2NlcHQgaGVhZGVyIGlzIHRoZSB1c2VyIGFnZW50IHRlbGxpbmcgd2hhdCBjb250ZW50IHR5cGVzIGl0IGlzIHdpbGxpbmcgdG8gYWNjZXB0LiBUaGlzIGlzIG9mdGVuICovKjsgdGhleSBhY2NlcHQgZXZlcnl0aGluZywgc28gaXQncyBub3QgdGVycmlibHkgdXNlZnVsLiAoVGhlIHNpbWlsYXIgc291bmRpbmcgQWNjZXB0LUVuY29kaW5nIGhlYWRlciBpcyBoYW5kbGVkIGF1dG9tYXRpY2FsbHkgZm9yIGNodW5raW5nIGFuZCBnemlwcGluZy4gU2ltcGx5IHNldCBnemlwUmVzcG9uc2UgPSB0cnVlIGFuZCBjZ2kuZCBoYW5kbGVzIHRoZSBkZXRhaWxzLCB6aXBwaW5nIGlmIHRoZSB1c2VyJ3MgYnJvd3NlciBpcyB3aWxsaW5nIHRvIGFjY2VwdCBpdC4KCWltbXV0YWJsZShjaGFyW10pIGxhc3RFdmVudElkOyAJLy8vIFRoZSBIVE1MIDUgZHJhZnQgaW5jbHVkZXMgYW4gRXZlbnRTb3VyY2UoKSBvYmplY3QgdGhhdCBjb25uZWN0cyB0byB0aGUgc2VydmVyLCBhbmQgcmVtYWlucyBvcGVuIHRvIHRha2UgYSBzdHJlYW0gb2YgZXZlbnRzLiBNeSBhcnNkLnJ0dWQgbW9kdWxlIGNhbiBoZWxwIHdpdGggdGhlIHNlcnZlciBzaWRlIHBhcnQgb2YgdGhhdC4gVGhlIExhc3QtRXZlbnQtSWQgaHR0cCBoZWFkZXIgaXMgZGVmaW5lZCBpbiB0aGUgZHJhZnQgdG8gaGVscCBoYW5kbGUgbG9zcyBvZiBjb25uZWN0aW9uLiBXaGVuIHRoZSBicm93c2VyIHJlY29ubmVjdHMgdG8geW91LCBpdCBzZXRzIHRoaXMgaGVhZGVyIHRvIHRoZSBsYXN0IGV2ZW50IGlkIGl0IHNhdywgc28geW91IGNhbiBjYXRjaCBpdCB1cC4gVGhpcyBtZW1iZXIgaGFzIHRoZSBjb250ZW50cyBvZiB0aGF0IGhlYWRlci4KCglpbW11dGFibGUoUmVxdWVzdE1ldGhvZCkgcmVxdWVzdE1ldGhvZDsgLy8vIFRoZSBIVFRQIHJlcXVlc3QgdmVyYjogR0VULCBQT1NULCBldGMuIEl0IGlzIHJlcHJlc2VudGVkIGFzIGFuIGVudW0gaW4gY2dpLmQgKHdoaWNoLCBsaWtlIG1hbnkgZW51bXMsIHlvdSBjYW4gY29udmVydCBiYWNrIHRvIHN0cmluZyB3aXRoIHN0ZC5jb252LnRvKCkpLiBBIEhUVFAgR0VUIGlzIHN1cHBvc2VkIHRvLCBhY2NvcmRpbmcgdG8gdGhlIHNwZWMsIG5vdCBoYXZlIHNpZGUgZWZmZWN0czsgYSB1c2VyIGNhbiBHRVQgc29tZXRoaW5nIG92ZXIgYW5kIG92ZXIgYWdhaW4gYW5kIGFsd2F5cyBoYXZlIHRoZSBzYW1lIHJlc3VsdC4gT24gYWxsIHJlcXVlc3RzLCB0aGUgZ2V0W10gYW5kIGdldEFycmF5W10gbWVtYmVycyBtYXkgYmUgZmlsbGVkIGluLiBUaGUgcG9zdFtdIGFuZCBwb3N0QXJyYXlbXSBtZW1iZXJzIGFyZSBvbmx5IGZpbGxlZCBpbiBvbiBQT1NUIG1ldGhvZHMuCglpbW11dGFibGUoY2hhcltdKSBxdWVyeVN0cmluZzsgCS8vLyBUaGUgdW5wYXJzZWQgY29udGVudCBvZiB0aGUgcmVxdWVzdCBxdWVyeSBzdHJpbmcgLSB0aGUgc3R1ZmYgYWZ0ZXIgdGhlID8gaW4geW91ciBVUkwuIFNlZSBnZXRbXSBhbmQgZ2V0QXJyYXlbXSBmb3IgYSBwYXJzZSB2aWV3IG9mIGl0LiBTb21ldGltZXMsIHRoZSB1bnBhcnNlZCBzdHJpbmcgaXMgdXNlZnVsIHRob3VnaCBpZiB5b3Ugd2FudCBhIGN1c3RvbSBmb3JtYXQgb2YgZGF0YSB1cCB0aGVyZSAocHJvYmFibHkgbm90IGEgZ29vZCBpZGVhLCB1bmxlc3MgaXQgaXMgcmVhbGx5IHNpbXBsZSwgbGlrZSAiP3VzZXJuYW1lIiBwZXJoYXBzLikKCWltbXV0YWJsZShjaGFyW10pIGNvb2tpZTsgCS8vLyBUaGUgdW5wYXJzZWQgY29udGVudCBvZiB0aGUgQ29va2llOiBoZWFkZXIgaW4gdGhlIHJlcXVlc3QuIFNlZSBhbHNvIHRoZSBjb29raWVzW3N0cmluZ10gbWVtYmVyIGZvciBhIHBhcnNlZCB2aWV3IG9mIHRoZSBkYXRhLgoJLyoqIFRoZSBSZWZlcmVyIGhlYWRlciBmcm9tIHRoZSByZXF1ZXN0LiAoSXQgaXMgbWlzc3BlbGxlZCBpbiB0aGUgSFRUUCBzcGVjLCBhbmQgdGh1cyB0aGUgYWN0dWFsIHJlcXVlc3QgYW5kIGNnaSBzcGVjcyB0b28sIGJ1dCBJIHNwZWxsZWQgdGhlIHdvcmQgY29ycmVjdGx5IGhlcmUgYmVjYXVzZSB0aGF0J3Mgc2FuZS4gVGhlIHNwZWMncyBtaXNzcGVsbGluZyBpcyBhbiBpbXBsZW1lbnRhdGlvbiBkZXRhaWwuKSBJdCBjb250YWlucyB0aGUgc2l0ZSB1cmwgdGhhdCByZWZlcnJlZCB0aGUgdXNlciB0byB5b3VyIHByb2dyYW07IHRoZSBzaXRlIHRoYXQgbGlua2VkIHRvIHlvdSwgb3IgaWYgeW91J3JlIHNlcnZpbmcgaW1hZ2VzLCB0aGUgc2l0ZSB0aGF0IGhhcyB5b3UgYXMgYW4gaW1hZ2UuIEFsc28sIGlmIHlvdSdyZSBpbiBhbiBpZnJhbWUsIHRoZSByZWZlcnJlciBpcyB0aGUgc2l0ZSB0aGF0IGlzIGZyYW1pbmcgeW91LgoKCUltcG9ydGFudCBub3RlOiBpZiB0aGUgdXNlciBjb3B5L3Bhc3RlcyB5b3VyIHVybCwgdGhpcyBpcyBibGFuaywgYW5kLCBqdXN0IGxpa2Ugd2l0aCBhbGwgb3RoZXIgdXNlciBkYXRhLCB0aGVpciBicm93c2VycyBjYW4gYWxzbyBsaWUgdG8geW91LiBEb24ndCByZWx5IG9uIGl0IGZvciByZWFsIHNlY3VyaXR5LgoJKi8KCWltbXV0YWJsZShjaGFyW10pIHJlZmVycmVyOwoJaW1tdXRhYmxlKGNoYXJbXSkgcmVxdWVzdFVyaTsgCS8vLyBUaGUgZnVsbCB1cmwgaWYgdGhlIGN1cnJlbnQgcmVxdWVzdCwgZXhjbHVkaW5nIHRoZSBwcm90b2NvbCBhbmQgaG9zdC4gcmVxdWVzdFVyaSA9PSBzY3JpcHROYW1lIH4gcGF0aEluZm8gfiAocXVlcnlTdHJpbmcubGVuZ3RoID8gIj8iIH4gcXVlcnlTdHJpbmcgOiAiIik7CgoJaW1tdXRhYmxlKGNoYXJbXSkgcmVtb3RlQWRkcmVzczsgLy8vIFRoZSBJUCBhZGRyZXNzIG9mIHRoZSB1c2VyLCBhcyB3ZSBzZWUgaXQuIChNaWdodCBub3QgbWF0Y2ggdGhlIElQIG9mIHRoZSB1c2VyJ3MgY29tcHV0ZXIgZHVlIHRvIHRoaW5ncyBsaWtlIHByb3hpZXMgYW5kIE5BVC4pIAoKCWltbXV0YWJsZSBib29sIGh0dHBzOyAJLy8vIFdhcyB0aGUgcmVxdWVzdCBlbmNyeXB0ZWQgdmlhIGh0dHBzPwoJaW1tdXRhYmxlIGludCBwb3J0OyAJLy8vIE9uIHdoYXQgVENQIHBvcnQgbnVtYmVyIGRpZCB0aGUgc2VydmVyIHJlY2VpdmUgdGhlIHJlcXVlc3Q/CgoJLyoqIEhlcmUgY29tZSB0aGUgcGFyc2VkIHJlcXVlc3QgdmFyaWFibGVzIC0gdGhlIHRoaW5ncyB0aGF0IGNvbWUgY2xvc2UgdG8gUEhQJ3MgX0dFVCwgX1BPU1QsIGV0Yy4gc3VwZXJnbG9iYWxzIGluIGNvbnRlbnQuICovCgoJaW1tdXRhYmxlKHN0cmluZ1tzdHJpbmddKSBnZXQ7IAkvLy8gVGhlIGRhdGEgZnJvbSB5b3VyIHF1ZXJ5IHN0cmluZyBpbiB0aGUgdXJsLCBvbmx5IHNob3dpbmcgdGhlIGxhc3Qgc3RyaW5nIG9mIGVhY2ggbmFtZS4gSWYgeW91IHdhbnQgdG8gaGFuZGxlIG11bHRpcGxlIHZhbHVlcyB3aXRoIHRoZSBzYW1lIG5hbWUsIHVzZSBnZXRBcnJheS4gVGhpcyBvbmx5IHdvcmtzIHJpZ2h0IGlmIHRoZSBxdWVyeSBzdHJpbmcgaXMgeC13d3ctZm9ybS11cmxlbmNvZGVkOyB0aGUgZGVmYXVsdCB5b3Ugc2VlIG9uIHRoZSB3ZWIgd2l0aCBuYW1lPXZhbHVlIHBhaXJzIHNlcGFyYXRlZCBieSB0aGUgJiBjaGFyYWN0ZXIuCglpbW11dGFibGUoc3RyaW5nW3N0cmluZ10pIHBvc3Q7IC8vLyBUaGUgZGF0YSBmcm9tIHRoZSByZXF1ZXN0J3MgYm9keSwgb24gUE9TVCByZXF1ZXN0cy4gSXQgcGFyc2VzIGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCBkYXRhICh1c2VkIGJ5IG1vc3Qgd2ViIHJlcXVlc3RzLCBpbmNsdWRpbmcgdHlwaWNhbCBmb3JtcyksIGFuZCBtdWx0aXBhcnQvZm9ybS1kYXRhIHJlcXVlc3RzICh1c2VkIGJ5IGZpbGUgdXBsb2FkcyBvbiB3ZWIgZm9ybXMpIGludG8gdGhlIHNhbWUgY29udGFpbmVyLCBzbyB5b3UgY2FuIGFsd2F5cyBhY2Nlc3MgdGhlbSB0aGUgc2FtZSB3YXkuIEl0IG1ha2VzIG5vIGF0dGVtcHQgdG8gcGFyc2Ugb3RoZXIgY29udGVudCB0eXBlcy4gSWYgeW91IHdhbnQgdG8gYWNjZXB0IGFuIFhNTCBQb3N0IGJvZHkgKGZvciBhIHdlYiBhcGkgcGVyaGFwcyksIHlvdSdsbCBuZWVkIHRvIGhhbmRsZSB0aGUgcmF3IGRhdGEgeW91cnNlbGYuCglpbW11dGFibGUoc3RyaW5nW3N0cmluZ10pIGNvb2tpZXM7IC8vLyBTZXBhcmF0ZXMgb3V0IHRoZSBjb29raWUgaGVhZGVyIGludG8gaW5kaXZpZHVhbCBuYW1lL3ZhbHVlIHBhaXJzICh3aGljaCBpcyBob3cgeW91IHNldCB0aGVtISkKCgkvKioKCQlSZXByZXNlbnRzIHVzZXIgdXBsb2FkZWQgZmlsZXMuCgkJCgkJV2hlbiBtYWtpbmcgYSBmaWxlIHVwbG9hZCBmb3JtLCBiZSBzdXJlIHRvIGZvbGxvdyB0aGUgc3RhbmRhcmQ6IHNldCBtZXRob2Q9IlBPU1QiIGFuZCBlbmN0eXBlPSJtdWx0aXBhcnQvZm9ybS1kYXRhIiBpbiB5b3VyIGh0bWwgPGZvcm0&#43;IHRhZyBhdHRyaWJ1dGVzLiBUaGUga2V5IGludG8gdGhpcyBhcnJheSBpcyB0aGUgbmFtZSBhdHRyaWJ1dGUgb24geW91ciBpbnB1dCB0YWcsIGp1c3QgbGlrZSB3aXRoIG90aGVyIHBvc3QgdmFyaWFibGVzLiBTZWUgdGhlIGNvbW1lbnRzIG9uIHRoZSBVcGxvYWRlZEZpbGUgc3RydWN0IGZvciBtb3JlIGluZm9ybWF0aW9uIGFib3V0IHRoZSBkYXRhIGluc2lkZSwgaW5jbHVkaW5nIGltcG9ydGFudCBub3RlcyBvbiBtYXggc2l6ZSBhbmQgY29udGVudCBsb2NhdGlvbi4KCSovCglpbW11dGFibGUoVXBsb2FkZWRGaWxlW11bc3RyaW5nXSkgZmlsZXNBcnJheTsKCWltbXV0YWJsZShVcGxvYWRlZEZpbGVbc3RyaW5nXSkgZmlsZXM7CgoJLy8vIFVzZSB0aGVzZSBpZiB5b3UgZXhwZWN0IG11bHRpcGxlIGl0ZW1zIHN1Ym1pdHRlZCB3aXRoIHRoZSBzYW1lIG5hbWUuIGJ0dywgYXNzZXJ0KGdldFtuYW1lXSBpcyBnZXRBcnJheVtuYW1lXVskLTEpOyBzaG91bGQgcGFzcy4gU2FtZSBmb3IgcG9zdCBhbmQgY29va2llcy4KCS8vLyB0aGUgb3JkZXIgb2YgdGhlIGFycmF5cyBpcyB0aGUgb3JkZXIgdGhlIGRhdGEgYXJyaXZlcwoJaW1tdXRhYmxlKHN0cmluZ1tdW3N0cmluZ10pIGdldEFycmF5OyAvLy8gbGlrZSBnZXQsIGJ1dCBhbiBhcnJheSBvZiB2YWx1ZXMgcGVyIG5hbWUKCWltbXV0YWJsZShzdHJpbmdbXVtzdHJpbmddKSBwb3N0QXJyYXk7IC8vLyBkaXR0byBmb3IgcG9zdAoJaW1tdXRhYmxlKHN0cmluZ1tdW3N0cmluZ10pIGNvb2tpZXNBcnJheTsgLy8vIGRpdHRvIGZvciBjb29raWVzCgoJLy8gY29udmVuaWVuY2UgZnVuY3Rpb24gZm9yIGFwcGVuZGluZyB0byBhIHVyaSB3aXRob3V0IGV4dHJhID8KCS8vIG1hdGNoZXMgdGhlIG5hbWUgYW5kIGVmZmVjdCBvZiBqYXZhc2NyaXB0J3MgbG9jYXRpb24uc2VhcmNoIHByb3BlcnR5CglzdHJpbmcgc2VhcmNoKCkgY29uc3QgewoJCWlmKHF1ZXJ5U3RyaW5nLmxlbmd0aCkKCQkJcmV0dXJuICI/IiB&#43;IHF1ZXJ5U3RyaW5nOwoJCXJldHVybiAiIjsKCX0KCgkvLyBGSVhNRTogd2hhdCBhYm91dCBtdWx0aXBsZSBmaWxlcyB3aXRoIHRoZSBzYW1lIG5hbWU/CiAgcHJpdmF0ZToKCS8vUmVxdWVzdE1ldGhvZCBfcmVxdWVzdE1ldGhvZDsKfQoKLy8vIHVzZSB0aGlzIGZvciB0ZXN0aW5nIG9yIG90aGVyIGlzb2xhdGVkIHRoaW5ncwpDZ2kgZHVtbXlDZ2koQ2dpLlJlcXVlc3RNZXRob2QgbWV0aG9kID0gQ2dpLlJlcXVlc3RNZXRob2QuR0VULCBzdHJpbmcgdXJsID0gbnVsbCwgaW4gdWJ5dGVbXSBkYXRhID0gbnVsbCwgdm9pZCBkZWxlZ2F0ZShjb25zdCh1Ynl0ZSlbXSkgb3V0cHV0U2luayA9IG51bGwpIHsKCS8vIHdlIHdhbnQgdG8gaWdub3JlLCBub3QgdXNlIHN0ZG91dAoJaWYob3V0cHV0U2luayBpcyBudWxsKQoJCW91dHB1dFNpbmsgPSBkZWxlZ2F0ZSB2b2lkKGNvbnN0KHVieXRlKVtdKSB7IH07CgoJc3RyaW5nW3N0cmluZ10gZW52OwoJZW52WyJSRVFVRVNUX01FVEhPRCJdID0gdG8hc3RyaW5nKG1ldGhvZCk7CgllbnZbIkNPTlRFTlRfTEVOR1RIIl0gPSB0byFzdHJpbmcoZGF0YS5sZW5ndGgpOwoKCWF1dG8gY2dpID0gbmV3IENnaSgKCQkwLAoJCWVudiwKCQl7IHJldHVybiBkYXRhOyB9LAoJCW91dHB1dFNpbmssCgkJbnVsbCk7CgoJcmV0dXJuIGNnaTsKfQoKCi8vIHNob3VsZCB0aGlzIGJlIGEgc2VwYXJhdGUgbW9kdWxlPyBQcm9iYWJseSwgYnV0IHRoYXQncyBhIGhhc3NsZS4KCi8vLyBNYWtlcyBhIGRhdGE6Ly8gdXJpIHRoYXQgY2FuIGJlIHVzZWQgYXMgbGlua3MgaW4gbW9zdCBuZXdlciBicm93c2VycyAoSUU4KykuCnN0cmluZyBtYWtlRGF0YVVybChzdHJpbmcgbWltZVR5cGUsIGluIHZvaWRbXSBkYXRhKSB7CglhdXRvIGRhdGE2NCA9IEJhc2U2NC5lbmNvZGUoY2FzdChjb25zdCh1Ynl0ZVtdKSkgZGF0YSk7CglyZXR1cm4gImRhdGE6IiB&#43;IG1pbWVUeXBlIH4gIjtiYXNlNjQsIiB&#43;IGFzc3VtZVVuaXF1ZShkYXRhNjQpOwp9CgovLyBGSVhNRTogSSBkb24ndCB0aGluayB0aGlzIGNsYXNzIGNvcnJlY3RseSBkZWNvZGVzL2VuY29kZXMgdGhlIGluZGl2aWR1YWwgcGFydHMKLy8vIFJlcHJlc2VudHMgYSB1cmwgdGhhdCBjYW4gYmUgYnJva2VuIGRvd24gb3IgYnVpbHQgdXAgdGhyb3VnaCBwcm9wZXJ0aWVzCnN0cnVjdCBVcmkgewoJYWxpYXMgdG9TdHJpbmcgdGhpczsgLy8gYmxhcmdoIGlkayBhIHVybCByZWFsbHkgaXMgYSBzdHJpbmcsIGJ1dCBzaG91bGQgaXQgYmUgaW1wbGljaXQ/CgoJLy8gc2NoZW1lLy91c2VyaW5mb0Bob3N0OnBvcnQvcGF0aD9xdWVyeSNmcmFnbWVudAoKCXN0cmluZyBzY2hlbWU7IC8vLyBlLmcuICJodHRwIiBpbiAiaHR0cDovL2V4YW1wbGUuY29tLyIKCXN0cmluZyB1c2VyaW5mbzsgLy8vIHRoZSB1c2VybmFtZSAoYW5kIHBvc3NpYmx5IGEgcGFzc3dvcmQpIGluIHRoZSB1cmkKCXN0cmluZyBob3N0OyAvLy8gdGhlIGRvbWFpbiBuYW1lCglpbnQgcG9ydDsgLy8vIHBvcnQgbnVtYmVyLCBpZiBnaXZlbi4gV2lsbCBiZSB6ZXJvIGlmIGEgcG9ydCB3YXMgbm90IGV4cGxpY2l0bHkgZ2l2ZW4KCXN0cmluZyBwYXRoOyAvLy8gZS5nLiAiL2ZvbGRlci9maWxlLmh0bWwiIGluICJodHRwOi8vZXhhbXBsZS5jb20vZm9sZGVyL2ZpbGUuaHRtbCIKCXN0cmluZyBxdWVyeTsgLy8vIHRoZSBzdHVmZiBhZnRlciB0aGUgPyBpbiBhIHVyaQoJc3RyaW5nIGZyYWdtZW50OyAvLy8gdGhlIHN0dWZmIGFmdGVyIHRoZSAjIGluIGEgdXJpLgoKCS8vIGlkayBpZiBpIHdhbnQgdG8ga2VlcCB0aGVzZSwgc2luY2UgdGhlIGZ1bmN0aW9ucyB0aGV5IHdyYXAgYXJlIHVzZWQgbWFueSwgbWFueSwgbWFueSB0aW1lcyBpbiBleGlzdGluZyBjb2RlLCBzbyB0aGlzIGlzIGVpdGhlciBhbiB1bm5lY2Vzc2FyeSBhbGlhcyBvciBhIGdyYXR1aXRvdXMgYnJlYWsgb2YgY29tcGF0aWJpbGl0eQoJLy8gdGhlIGRlY29kZSBvbmVzIG5lZWQgdG8ga2VlcCBkaWZmZXJlbnQgbmFtZXMgYW55d2F5IGJlY2F1c2Ugd2UgY2FuJ3Qgb3ZlcmxvYWQgb24gcmV0dXJuIHZhbHVlcy4uLgoJc3RhdGljIHN0cmluZyBlbmNvZGUoc3RyaW5nIHMpIHsgcmV0dXJuIHN0ZC51cmkuZW5jb2RlQ29tcG9uZW50KHMpOyB9CglzdGF0aWMgc3RyaW5nIGVuY29kZShzdHJpbmdbc3RyaW5nXSBzKSB7IHJldHVybiBlbmNvZGVWYXJpYWJsZXMocyk7IH0KCXN0YXRpYyBzdHJpbmcgZW5jb2RlKHN0cmluZ1tdW3N0cmluZ10gcykgeyByZXR1cm4gZW5jb2RlVmFyaWFibGVzKHMpOyB9CgoJLy8vIEJyZWFrcyBkb3duIGEgdXJpIHN0cmluZyB0byBpdHMgY29tcG9uZW50cwoJdGhpcyhzdHJpbmcgdXJpKSB7CgkJcmVwYXJzZSh1cmkpOwoJfQoKCXByaXZhdGUgdm9pZCByZXBhcnNlKHN0cmluZyB1cmkpIHsKCQlpbXBvcnQgc3RkLnJlZ2V4OwoJCS8vIGZyb20gUkZDIDM5ODYKCgkJLy8gdGhlIGN0UmVnZXggdHJpcGxlcyB0aGUgY29tcGlsZSB0aW1lIGFuZCBtYWtlcyB1Z2x5IGVycm9ycyBmb3Igbm8gcmVhbCBiZW5lZml0CgkJLy8gaXQgd2FzIGEgbmljZSBleHBlcmltZW50IGJ1dCBqdXN0IG5vdCB3b3J0aCBpdC4KCQkvLyBlbnVtIGN0ciA9IGN0UmVnZXghciJeKChbXjovPyNdKyk6KT8oLy8oW14vPyNdKikpPyhbXj8jXSopKFw/KFteI10qKSk/KCMoLiopKT8iOwoJCWF1dG8gY3RyID0gcmVnZXgociJeKChbXjovPyNdKyk6KT8oLy8oW14vPyNdKikpPyhbXj8jXSopKFw/KFteI10qKSk/KCMoLiopKT8iKTsKCgkJYXV0byBtID0gbWF0Y2godXJpLCBjdHIpOwoJCWlmKG0pIHsKCQkJc2NoZW1lID0gbS5jYXB0dXJlc1syXTsKCQkJYXV0byBhdXRob3JpdHkgPSBtLmNhcHR1cmVzWzRdOwoKCQkJYXV0byBpZHggPSBhdXRob3JpdHkuaW5kZXhPZigiQCIpOwoJCQlpZihpZHggIT0gLTEpIHsKCQkJCXVzZXJpbmZvID0gYXV0aG9yaXR5WzAgLi4gaWR4XTsKCQkJCWF1dGhvcml0eSA9IGF1dGhvcml0eVtpZHggKyAxIC4uICRdOwoJCQl9CgoJCQlpZHggPSBhdXRob3JpdHkuaW5kZXhPZigiOiIpOwoJCQlpZihpZHggPT0gLTEpIHsKCQkJCXBvcnQgPSAwOyAvLyAwIG1lYW5zIG5vdCBzcGVjaWZpZWQ7IHdlIHNob3VsZCB1c2UgdGhlIGRlZmF1bHQgZm9yIHRoZSBzY2hlbWUKCQkJCWhvc3QgPSBhdXRob3JpdHk7CgkJCX0gZWxzZSB7CgkJCQlob3N0ID0gYXV0aG9yaXR5WzAgLi4gaWR4XTsKCQkJCXBvcnQgPSB0byFpbnQoYXV0aG9yaXR5W2lkeCArIDEgLi4gJF0pOwoJCQl9CgoJCQlwYXRoID0gbS5jYXB0dXJlc1s1XTsKCQkJcXVlcnkgPSBtLmNhcHR1cmVzWzddOwoJCQlmcmFnbWVudCA9IG0uY2FwdHVyZXNbOV07CgkJfQoJCS8vIHVyaUludmFsaWRhdGVkID0gZmFsc2U7Cgl9CgoJcHJpdmF0ZSBzdHJpbmcgcmVidWlsZFVyaSgpIGNvbnN0IHsKCQlzdHJpbmcgcmV0OwoJCWlmKHNjaGVtZS5sZW5ndGgpCgkJCXJldCB&#43;PSBzY2hlbWUgfiAiOiI7CgkJaWYodXNlcmluZm8ubGVuZ3RoIHx8IGhvc3QubGVuZ3RoKQoJCQlyZXQgfj0gIi8vIjsKCQlpZih1c2VyaW5mby5sZW5ndGgpCgkJCXJldCB&#43;PSB1c2VyaW5mbyB&#43;ICJAIjsKCQlpZihob3N0Lmxlbmd0aCkKCQkJcmV0IH49IGhvc3Q7CgkJaWYocG9ydCkKCQkJcmV0IH49ICI6IiB&#43;IHRvIXN0cmluZyhwb3J0KTsKCgkJcmV0IH49IHBhdGg7CgoJCWlmKHF1ZXJ5Lmxlbmd0aCkKCQkJcmV0IH49ICI/IiB&#43;IHF1ZXJ5OwoKCQlpZihmcmFnbWVudC5sZW5ndGgpCgkJCXJldCB&#43;PSAiIyIgfiBmcmFnbWVudDsKCgkJLy8gdXJpID0gcmV0OwoJCS8vIHVyaUludmFsaWRhdGVkID0gZmFsc2U7CgkJcmV0dXJuIHJldDsKCX0KCgkvLy8gQ29udmVydHMgdGhlIGJyb2tlbiBkb3duIHBhcnRzIGJhY2sgaW50byBhIGNvbXBsZXRlIHN0cmluZwoJc3RyaW5nIHRvU3RyaW5nKCkgY29uc3QgewoJCS8vIGlmKHVyaUludmFsaWRhdGVkKQoJCQlyZXR1cm4gcmVidWlsZFVyaSgpOwoJfQoKCS8vLyBSZXR1cm5zIGEgbmV3IGFic29sdXRlIFVyaSBnaXZlbiBhIGJhc2UuIEl0IHRyZWF0cyB0aGlzIG9uZSBhcwoJLy8vIHJlbGF0aXZlIHdoZXJlIHBvc3NpYmxlLCBidXQgYWJzb2x1dGUgaWYgbm90LiAoSWYgcHJvdG9jb2wsIGRvbWFpbiwgb3IKCS8vLyBvdGhlciBpbmZvIGlzIG5vdCBzZXQsIHRoZSBuZXcgb25lIGluaGVyaXRzIGl0IGZyb20gdGhlIGJhc2UuKQoJLy8vCgkvLy8gQnJvd3NlcnMgdXNlIGEgZnVuY3Rpb24gbGlrZSB0aGlzIHRvIGZpZ3VyZSBvdXQgbGlua3MgaW4gaHRtbC4KCVVyaSBiYXNlZE9uKGluIFVyaSBiYXNlVXJsKSBjb25zdCB7CgkJVXJpIG4gPSB0aGlzOyAvLyBjb3BpZXMKCQkvLyBuLnVyaUludmFsaWRhdGVkID0gdHJ1ZTsgLy8gbWFrZSBzdXJlIHdlIHJlZ2VuZXJhdGUuLi4KCgkJLy8gdXNlcmluZm8gaXMgbm90IGluaGVyaXRlZC4uLiBpcyB0aGlzIHdyb25nPwoKCQkvLyBpZiBhbnl0aGluZyBpcyBnaXZlbiBpbiB0aGUgZXhpc3RpbmcgdXJsLCB3ZSBkb24ndCB1c2UgdGhlIGJhc2UgYW55bW9yZS4KCQlpZihuLnNjaGVtZS5lbXB0eSkgewoJCQluLnNjaGVtZSA9IGJhc2VVcmwuc2NoZW1lOwoJCQlpZihuLmhvc3QuZW1wdHkpIHsKCQkJCW4uaG9zdCA9IGJhc2VVcmwuaG9zdDsKCQkJCWlmKG4ucG9ydCA9PSAwKSB7CgkJCQkJbi5wb3J0ID0gYmFzZVVybC5wb3J0OwoJCQkJCWlmKG4ucGF0aC5sZW5ndGggPiAwICYmIG4ucGF0aFswXSAhPSAnLycpIHsKCQkJCQkJYXV0byBiID0gYmFzZVVybC5wYXRoWzAgLi4gYmFzZVVybC5wYXRoLmxhc3RJbmRleE9mKCIvIikgKyAxXTsKCQkJCQkJaWYoYi5sZW5ndGggPT0gMCkKCQkJCQkJCWIgPSAiLyI7CgkJCQkJCW4ucGF0aCA9IGIgfiBuLnBhdGg7CgkJCQkJfSBlbHNlIGlmKG4ucGF0aC5sZW5ndGggPT0gMCkgewoJCQkJCQluLnBhdGggPSBiYXNlVXJsLnBhdGg7CgkJCQkJfQoJCQkJfQoJCQl9CgkJfQoKCQlyZXR1cm4gbjsKCX0KCgkvLyBUaGlzIGNhbiBzb21ldGltZXMgYmUgYSBiaWcgcGFpbiBpbiB0aGUgYnV0dCBmb3IgbWUsIHNvIGxvdHMgb2YgY29weS9wYXN0ZSBoZXJlIHRvIGNvdmVyCgkvLyB0aGUgcG9zc2liaWxpdGllcy4KCXVuaXR0ZXN0IHsKCQlhdXRvIHVybCA9IFVyaSgiY29vbC5odG1sIik7IC8vIGNoZWNraW5nIHJlbGF0aXZlIGxpbmtzCgoJCWFzc2VydCh1cmwuYmFzZWRPbihVcmkoImh0dHA6Ly90ZXN0LmNvbS93aGF0L3Rlc3QuaHRtbCIpKSA9PSAiaHR0cDovL3Rlc3QuY29tL3doYXQvY29vbC5odG1sIik7CgkJYXNzZXJ0KHVybC5iYXNlZE9uKFVyaSgiaHR0cHM6Ly90ZXN0LmNvbS93aGF0L3Rlc3QuaHRtbCIpKSA9PSAiaHR0cHM6Ly90ZXN0LmNvbS93aGF0L2Nvb2wuaHRtbCIpOwoJCWFzc2VydCh1cmwuYmFzZWRPbihVcmkoImh0dHA6Ly90ZXN0LmNvbS93aGF0LyIpKSA9PSAiaHR0cDovL3Rlc3QuY29tL3doYXQvY29vbC5odG1sIik7CgkJYXNzZXJ0KHVybC5iYXNlZE9uKFVyaSgiaHR0cDovL3Rlc3QuY29tLyIpKSA9PSAiaHR0cDovL3Rlc3QuY29tL2Nvb2wuaHRtbCIpOwoJCWFzc2VydCh1cmwuYmFzZWRPbihVcmkoImh0dHA6Ly90ZXN0LmNvbSIpKSA9PSAiaHR0cDovL3Rlc3QuY29tL2Nvb2wuaHRtbCIpOwoJCWFzc2VydCh1cmwuYmFzZWRPbihVcmkoImh0dHA6Ly90ZXN0LmNvbS93aGF0L3Rlc3QuaHRtbD9hPWIiKSkgPT0gImh0dHA6Ly90ZXN0LmNvbS93aGF0L2Nvb2wuaHRtbCIpOwoJCWFzc2VydCh1cmwuYmFzZWRPbihVcmkoImh0dHA6Ly90ZXN0LmNvbS93aGF0L3Rlc3QuaHRtbD9hPWImYz1kIikpID09ICJodHRwOi8vdGVzdC5jb20vd2hhdC9jb29sLmh0bWwiKTsKCQlhc3NlcnQodXJsLmJhc2VkT24oVXJpKCJodHRwOi8vdGVzdC5jb20vd2hhdC90ZXN0Lmh0bWw/YT1iJmM9ZCN3aGF0IikpID09ICJodHRwOi8vdGVzdC5jb20vd2hhdC9jb29sLmh0bWwiKTsKCQlhc3NlcnQodXJsLmJhc2VkT24oVXJpKCJodHRwOi8vdGVzdC5jb20iKSkgPT0gImh0dHA6Ly90ZXN0LmNvbS9jb29sLmh0bWwiKTsKCgkJdXJsID0gVXJpKCIvc29tZXRoaW5nL2Nvb2wuaHRtbCIpOyAvLyBzYW1lIHNlcnZlciwgZGlmZmVyZW50IHBhdGgKCQlhc3NlcnQodXJsLmJhc2VkT24oVXJpKCJodHRwOi8vdGVzdC5jb20vd2hhdC90ZXN0Lmh0bWwiKSkgPT0gImh0dHA6Ly90ZXN0LmNvbS9zb21ldGhpbmcvY29vbC5odG1sIik7CgkJYXNzZXJ0KHVybC5iYXNlZE9uKFVyaSgiaHR0cHM6Ly90ZXN0LmNvbS93aGF0L3Rlc3QuaHRtbCIpKSA9PSAiaHR0cHM6Ly90ZXN0LmNvbS9zb21ldGhpbmcvY29vbC5odG1sIik7CgkJYXNzZXJ0KHVybC5iYXNlZE9uKFVyaSgiaHR0cDovL3Rlc3QuY29tL3doYXQvIikpID09ICJodHRwOi8vdGVzdC5jb20vc29tZXRoaW5nL2Nvb2wuaHRtbCIpOwoJCWFzc2VydCh1cmwuYmFzZWRPbihVcmkoImh0dHA6Ly90ZXN0LmNvbS8iKSkgPT0gImh0dHA6Ly90ZXN0LmNvbS9zb21ldGhpbmcvY29vbC5odG1sIik7CgkJYXNzZXJ0KHVybC5iYXNlZE9uKFVyaSgiaHR0cDovL3Rlc3QuY29tIikpID09ICJodHRwOi8vdGVzdC5jb20vc29tZXRoaW5nL2Nvb2wuaHRtbCIpOwoJCWFzc2VydCh1cmwuYmFzZWRPbihVcmkoImh0dHA6Ly90ZXN0LmNvbS93aGF0L3Rlc3QuaHRtbD9hPWIiKSkgPT0gImh0dHA6Ly90ZXN0LmNvbS9zb21ldGhpbmcvY29vbC5odG1sIik7CgkJYXNzZXJ0KHVybC5iYXNlZE9uKFVyaSgiaHR0cDovL3Rlc3QuY29tL3doYXQvdGVzdC5odG1sP2E9YiZjPWQiKSkgPT0gImh0dHA6Ly90ZXN0LmNvbS9zb21ldGhpbmcvY29vbC5odG1sIik7CgkJYXNzZXJ0KHVybC5iYXNlZE9uKFVyaSgiaHR0cDovL3Rlc3QuY29tL3doYXQvdGVzdC5odG1sP2E9YiZjPWQjd2hhdCIpKSA9PSAiaHR0cDovL3Rlc3QuY29tL3NvbWV0aGluZy9jb29sLmh0bWwiKTsKCQlhc3NlcnQodXJsLmJhc2VkT24oVXJpKCJodHRwOi8vdGVzdC5jb20iKSkgPT0gImh0dHA6Ly90ZXN0LmNvbS9zb21ldGhpbmcvY29vbC5odG1sIik7CgoJCXVybCA9IFVyaSgiP3F1ZXJ5PWFuc3dlciIpOyAvLyBzYW1lIHBhdGguIHNlcnZlciwgcHJvdG9jb2wsIGFuZCBwb3J0LCBqdXN0IGRpZmZlcmVudCBxdWVyeSBzdHJpbmcgYW5kIGZyYWdtZW50CgkJYXNzZXJ0KHVybC5iYXNlZE9uKFVyaSgiaHR0cDovL3Rlc3QuY29tL3doYXQvdGVzdC5odG1sIikpID09ICJodHRwOi8vdGVzdC5jb20vd2hhdC90ZXN0Lmh0bWw/cXVlcnk9YW5zd2VyIik7CgkJYXNzZXJ0KHVybC5iYXNlZE9uKFVyaSgiaHR0cHM6Ly90ZXN0LmNvbS93aGF0L3Rlc3QuaHRtbCIpKSA9PSAiaHR0cHM6Ly90ZXN0LmNvbS93aGF0L3Rlc3QuaHRtbD9xdWVyeT1hbnN3ZXIiKTsKCQlhc3NlcnQodXJsLmJhc2VkT24oVXJpKCJodHRwOi8vdGVzdC5jb20vd2hhdC8iKSkgPT0gImh0dHA6Ly90ZXN0LmNvbS93aGF0Lz9xdWVyeT1hbnN3ZXIiKTsKCQlhc3NlcnQodXJsLmJhc2VkT24oVXJpKCJodHRwOi8vdGVzdC5jb20vIikpID09ICJodHRwOi8vdGVzdC5jb20vP3F1ZXJ5PWFuc3dlciIpOwoJCWFzc2VydCh1cmwuYmFzZWRPbihVcmkoImh0dHA6Ly90ZXN0LmNvbSIpKSA9PSAiaHR0cDovL3Rlc3QuY29tP3F1ZXJ5PWFuc3dlciIpOwoJCWFzc2VydCh1cmwuYmFzZWRPbihVcmkoImh0dHA6Ly90ZXN0LmNvbS93aGF0L3Rlc3QuaHRtbD9hPWIiKSkgPT0gImh0dHA6Ly90ZXN0LmNvbS93aGF0L3Rlc3QuaHRtbD9xdWVyeT1hbnN3ZXIiKTsKCQlhc3NlcnQodXJsLmJhc2VkT24oVXJpKCJodHRwOi8vdGVzdC5jb20vd2hhdC90ZXN0Lmh0bWw/YT1iJmM9ZCIpKSA9PSAiaHR0cDovL3Rlc3QuY29tL3doYXQvdGVzdC5odG1sP3F1ZXJ5PWFuc3dlciIpOwoJCWFzc2VydCh1cmwuYmFzZWRPbihVcmkoImh0dHA6Ly90ZXN0LmNvbS93aGF0L3Rlc3QuaHRtbD9hPWImYz1kI3doYXQiKSkgPT0gImh0dHA6Ly90ZXN0LmNvbS93aGF0L3Rlc3QuaHRtbD9xdWVyeT1hbnN3ZXIiKTsKCQlhc3NlcnQodXJsLmJhc2VkT24oVXJpKCJodHRwOi8vdGVzdC5jb20iKSkgPT0gImh0dHA6Ly90ZXN0LmNvbT9xdWVyeT1hbnN3ZXIiKTsKCgkJdXJsID0gVXJpKCIjYW5jaG9yIik7IC8vIGV2ZXJ5dGhpbmcgc2hvdWxkIHJlbWFpbiB0aGUgc2FtZSBleGNlcHQgdGhlIGFuY2hvcgoKCQl1cmwgPSBVcmkoIi8vZXhhbXBsZS5jb20iKTsgLy8gc2FtZSBwcm90b2NvbCwgYnV0IGRpZmZlcmVudCBzZXJ2ZXIuIHRoZSBwYXRoIGhlcmUgc2hvdWxkIGJlIGJsYW5rLgoKCQl1cmwgPSBVcmkoIi8vZXhhbXBsZS5jb20vZXhhbXBsZS5odG1sIik7IC8vIHNhbWUgcHJvdG9jb2wsIGJ1dCBkaWZmZXJlbnQgc2VydmVyIGFuZCBwYXRoCgoJCXVybCA9IFVyaSgiaHR0cDovL2V4YW1wbGUuY29tL3Rlc3QuaHRtbCIpOyAvLyBjb21wbGV0ZWx5IGFic29sdXRlIGxpbmsgc2hvdWxkIG5ldmVyIGJlIG1vZGlmaWVkCgoJCXVybCA9IFVyaSgiaHR0cDovL2V4YW1wbGUuY29tIik7IC8vIGNvbXBsZXRlbHkgYWJzb2x1dGUgbGluayBzaG91bGQgbmV2ZXIgYmUgbW9kaWZpZWQsIGV2ZW4gaWYgaXQgaGFzIG5vIHBhdGgKCgkJLy8gRklYTUU6IGFkZCBzb21ldGhpbmcgZm9yIHBvcnQgdG9vCgl9CgoJLy8gdGhlc2UgYXJlIGxpa2UgamF2YXNjcmlwdCdzIGxvY2F0aW9uLnNlYXJjaCBhbmQgbG9jYXRpb24uaGFzaAoJc3RyaW5nIHNlYXJjaCgpIGNvbnN0IHsKCQlyZXR1cm4gcXVlcnkubGVuZ3RoID8gKCI/IiB&#43;IHF1ZXJ5KSA6ICIiOwoJfQoJc3RyaW5nIGhhc2goKSBjb25zdCB7CgkJcmV0dXJuIGZyYWdtZW50Lmxlbmd0aCA/ICgiIyIgfiBmcmFnbWVudCkgOiAiIjsKCX0KfQoKCi8qCglmb3Igc2Vzc2lvbiwgc2VlIHdlYi5kCiovCgovLy8gYnJlYWtzIGRvd24gYSB1cmwgZW5jb2RlZCBzdHJpbmcKc3RyaW5nW11bc3RyaW5nXSBkZWNvZGVWYXJpYWJsZXMoc3RyaW5nIGRhdGEsIHN0cmluZyBzZXBhcmF0b3IgPSAiJiIpIHsKCWF1dG8gdmFycyA9IGRhdGEuc3BsaXQoc2VwYXJhdG9yKTsKCXN0cmluZ1tdW3N0cmluZ10gX2dldDsKCWZvcmVhY2godmFyOyB2YXJzKSB7CgkJYXV0byBlcXVhbCA9IHZhci5pbmRleE9mKCI9Iik7CgkJaWYoZXF1YWwgPT0gLTEpIHsKCQkJX2dldFtkZWNvZGVDb21wb25lbnQodmFyKV0gfj0gIiI7CgkJfSBlbHNlIHsKCQkJLy9fZ2V0W2RlY29kZUNvbXBvbmVudCh2YXJbMC4uZXF1YWxdKV0gfj0gZGVjb2RlQ29tcG9uZW50KHZhcltlcXVhbCArIDEgLi4gJF0ucmVwbGFjZSgiKyIsICIgIikpOwoJCQkvLyBzdHVwaWQgKyAtPiBzcGFjZSBjb252ZXJzaW9uLgoJCQlfZ2V0W2RlY29kZUNvbXBvbmVudCh2YXJbMC4uZXF1YWxdLnJlcGxhY2UoIisiLCAiICIpKV0gfj0gZGVjb2RlQ29tcG9uZW50KHZhcltlcXVhbCArIDEgLi4gJF0ucmVwbGFjZSgiKyIsICIgIikpOwoJCX0KCX0KCXJldHVybiBfZ2V0Owp9CgovLy8gYnJlYWtzIGRvd24gYSB1cmwgZW5jb2RlZCBzdHJpbmcsIGJ1dCBvbmx5IHJldHVybnMgdGhlIGxhc3QgdmFsdWUgb2YgYW55IGFycmF5CnN0cmluZ1tzdHJpbmddIGRlY29kZVZhcmlhYmxlc1NpbmdsZShzdHJpbmcgZGF0YSkgewoJc3RyaW5nW3N0cmluZ10gdmE7CglhdXRvIHZhckFycmF5ID0gZGVjb2RlVmFyaWFibGVzKGRhdGEpOwoJZm9yZWFjaChrLCB2OyB2YXJBcnJheSkKCQl2YVtrXSA9IHZbJC0xXTsKCglyZXR1cm4gdmE7Cn0KCi8vLyB1cmwgZW5jb2RlcyB0aGUgd2hvbGUgc3RyaW5nCnN0cmluZyBlbmNvZGVWYXJpYWJsZXMoaW4gc3RyaW5nW3N0cmluZ10gZGF0YSkgewoJc3RyaW5nIHJldDsKCglib29sIG91dHB1dHRlZCA9IGZhbHNlOwoJZm9yZWFjaChrLCB2OyBkYXRhKSB7CgkJaWYob3V0cHV0dGVkKQoJCQlyZXQgfj0gIiYiOwoJCWVsc2UKCQkJb3V0cHV0dGVkID0gdHJ1ZTsKCgkJcmV0IH49IHN0ZC51cmkuZW5jb2RlQ29tcG9uZW50KGspIH4gIj0iIH4gc3RkLnVyaS5lbmNvZGVDb21wb25lbnQodik7Cgl9CgoJcmV0dXJuIHJldDsKfQoKLy8vIHVybCBlbmNvZGVzIGEgd2hvbGUgc3RyaW5nCnN0cmluZyBlbmNvZGVWYXJpYWJsZXMoaW4gc3RyaW5nW11bc3RyaW5nXSBkYXRhKSB7CglzdHJpbmcgcmV0OwoKCWJvb2wgb3V0cHV0dGVkID0gZmFsc2U7Cglmb3JlYWNoKGssIGFycjsgZGF0YSkgewoJCWZvcmVhY2godjsgYXJyKSB7CgkJCWlmKG91dHB1dHRlZCkKCQkJCXJldCB&#43;PSAiJiI7CgkJCWVsc2UKCQkJCW91dHB1dHRlZCA9IHRydWU7CgkJCXJldCB&#43;PSBzdGQudXJpLmVuY29kZUNvbXBvbmVudChrKSB&#43;ICI9IiB&#43;IHN0ZC51cmkuZW5jb2RlQ29tcG9uZW50KHYpOwoJCX0KCX0KCglyZXR1cm4gcmV0Owp9CgovLy8gRW5jb2RlcyBhbGwgYnV0IHRoZSBleHBsaWNpdGx5IHVucmVzZXJ2ZWQgY2hhcmFjdGVycyBwZXIgcmZjIDM5ODYKLy8vIEFscGhhbnVtZXJpYyBhbmQgLV8ufiBhcmUgdGhlIG9ubHkgb25lcyBsZWZ0IHVuZW5jb2RlZAovLy8gbmFtZSBpcyBib3Jyb3dlZCBmcm9tIHBocApzdHJpbmcgcmF3dXJsZW5jb2RlKGluIGNoYXJbXSBkYXRhKSB7CglzdHJpbmcgcmV0OwoJcmV0LnJlc2VydmUoZGF0YS5sZW5ndGggKiAyKTsKCWZvcmVhY2goY2hhciBjOyBkYXRhKSB7CgkJaWYoCgkJCShjID49ICdhJyAmJiBjIDw9ICd6JykgfHwKCQkJKGMgPj0gJ0EnICYmIGMgPD0gJ1onKSB8fAoJCQkoYyA&#43;PSAnMCcgJiYgYyA8PSAnOScpIHx8CgkJCWMgPT0gJy0nIHx8IGMgPT0gJ18nIHx8IGMgPT0gJy4nIHx8IGMgPT0gJ34nKQoJCXsKCQkJcmV0IH49IGM7CgkJfSBlbHNlIHsKCQkJcmV0IH49ICclJzsKCQkJLy8gc2luY2Ugd2UgaXRlcmF0ZSBvbiBjaGFyLCB0aGlzIHNob3VsZCBnaXZlIHVzIHRoZSBvY3RldHMgb2YgdGhlIGZ1bGwgdXRmOCBzdHJpbmcKCQkJcmV0IH49IHRvSGV4VXBwZXIoYyk7CgkJfQoJfQoKCXJldHVybiByZXQ7Cn0KCgovLyBodHRwIGhlbHBlciBmdW5jdGlvbnMKCi8vIGZvciBjaHVua2VkIHJlc3BvbnNlcyAod2hpY2ggZW1iZWRkZWQgaHR0cCBkb2VzIHdoZW5ldmVyIHBvc3NpYmxlKQp2ZXJzaW9uKG5vbmUpIC8vIHRoaXMgaXMgbW92ZWQgdXAgYWJvdmUgdG8gYXZvaWQgbWFraW5nIGEgY29weSBvZiB0aGUgZGF0YQpjb25zdCh1Ynl0ZSlbXSBtYWtlQ2h1bmsoY29uc3QodWJ5dGUpW10gZGF0YSkgewoJY29uc3QodWJ5dGUpW10gcmV0OwoKCXJldCA9IGNhc3QoY29uc3QodWJ5dGUpW10pIHRvSGV4KGRhdGEubGVuZ3RoKTsKCXJldCB&#43;PSBjYXN0KGNvbnN0KHVieXRlKVtdKSAiXHJcbiI7CglyZXQgfj0gZGF0YTsKCXJldCB&#43;PSBjYXN0KGNvbnN0KHVieXRlKVtdKSAiXHJcbiI7CgoJcmV0dXJuIHJldDsKfQoKc3RyaW5nIHRvSGV4KGxvbmcgbnVtKSB7CglzdHJpbmcgcmV0OwoJd2hpbGUobnVtKSB7CgkJaW50IHYgPSBudW0gJSAxNjsKCQludW0gLz0gMTY7CgkJY2hhciBkID0gY2FzdChjaGFyKSAoKHYgPCAxMCkgPyB2ICsgJzAnIDogKHYtMTApICsgJ2EnKTsKCQlyZXQgfj0gZDsKCX0KCglyZXR1cm4gdG8hc3RyaW5nKGFycmF5KHJldC5yZXRybykpOwp9CgpzdHJpbmcgdG9IZXhVcHBlcihsb25nIG51bSkgewoJc3RyaW5nIHJldDsKCXdoaWxlKG51bSkgewoJCWludCB2ID0gbnVtICUgMTY7CgkJbnVtIC89IDE2OwoJCWNoYXIgZCA9IGNhc3QoY2hhcikgKCh2IDwgMTApID8gdiArICcwJyA6ICh2LTEwKSArICdBJyk7CgkJcmV0IH49IGQ7Cgl9CgoJaWYocmV0Lmxlbmd0aCA9PSAxKQoJCXJldCB&#43;&#43;&#43;PSB1bmRlcmx5aW5nQnVmZmVyLnB0cik7CgkJLy8gaXQgc2hvdWxkIG5ldmVyIGJlIGVxdWFsLCBzaW5jZSBpZiB0aGF0IGhhcHBlbnMgdmlldyBvdWdodCB0byBiZSBlbXB0eSwgYW5kIHRodXMgcmV1c2luZyB0aGUgYnVmZmVyCgkJYXNzZXJ0KHZpZXcucHRyIDwgdW5kZXJseWluZ0J1ZmZlci5wdHIgKyB1bmRlcmx5aW5nQnVmZmVyLmxlbmd0aCk7Cgl9CgoJdWJ5dGVbXSB1bmRlcmx5aW5nQnVmZmVyOwoJYm9vbCBhbGxvd0dyb3d0aDsKCXVieXRlW10gdmlldzsKCVNvY2tldCBzb3VyY2U7Cglib29sIHNvdXJjZUNsb3NlZDsKfQoKY2xhc3MgQ29ubmVjdGlvblRocmVhZDIgOiBUaHJlYWQgewoJaW1wb3J0IHN0ZC5jb25jdXJyZW5jeTsKCXRoaXModm9pZCBmdW5jdGlvbihTb2NrZXQpIGhhbmRsZXIpIHsKCQl0aGlzLmhhbmRsZXIgPSBoYW5kbGVyOwoJCXN1cGVyKCZydW4pOwoJfQoKCXZvaWQgcnVuKCkgewoJCXRpZCA9IHRoaXNUaWQoKTsKCQlhdmFpbGFibGUgPSB0cnVlOwoJCXdoaWxlKHRydWUpCgkJcmVjZWl2ZSgKCQkJKC8qU29ja2V0Ki8gc2l6ZV90IHMpIHsKCQkJCWF2YWlsYWJsZSA9IGZhbHNlOwoJCQkJdHJ5IHsKCQkJCQloYW5kbGVyKGNhc3QoU29ja2V0KSBjYXN0KHZvaWQqKSBzKTsKCQkJCX0gY2F0Y2goVGhyb3dhYmxlIHQpIHt9CgkJCQlhdmFpbGFibGUgPSB0cnVlOwoJCQl9CgkJKTsKCX0KCglib29sIGF2YWlsYWJsZTsKCVRpZCB0aWQ7Cgl2b2lkIGZ1bmN0aW9uKFNvY2tldCkgaGFuZGxlcjsKfQoKLyoqCglUbyB1c2UgdGhpcyB0aGluZzoKCgl2b2lkIGhhbmRsZXIoU29ja2V0IHMpIHsgZG8gc29tZXRoaW5nLi4uIH0KCWF1dG8gbWFuYWdlciA9IG5ldyBMaXN0ZW5pbmdDb25uZWN0aW9uTWFuYWdlcigiMTI3LjAuMC4xIiwgODAsICZoYW5kbGVyKTsKCW1hbmFnZXIubGlzdGVuKCk7CgoJSSBzdWdnZXN0IHlvdSB1c2UgQnVmZmVyZWRJbnB1dFJhbmdlKGNvbm5lY3Rpb24pIHRvIGhhbmRsZSB0aGUgaW5wdXQuIEFzIGEgcGFja2V0Cgljb21lcyBpbiwgeW91IHdpbGwgZ2V0IGNvbnRyb2wuIFlvdSBjYW4ganVzdCBjb250aW51ZTsgdGhvdWdoIHRvIGZldGNoIG1vcmUuCgoKCUZJWE1FOiBzaG91bGQgSSBvZmZlciBhbiBldmVudCBiYXNlZCBhc3luYyB0aGluZyBsaWtlIG5ldG1hbiBkaWQgdG9vPyBZZWFoLCBwcm9iYWJseS4KKi8KY2xhc3MgTGlzdGVuaW5nQ29ubmVjdGlvbk1hbmFnZXIgewoJdm9pZCBsaXN0ZW4oKSB7CgkJdmVyc2lvbihjZ2lfbXVsdGlwbGVfY29ubmVjdGlvbnNfcGVyX3RocmVhZCkgewoJCQlpbXBvcnQgc3RkLmNvbmN1cnJlbmN5OwoJCQlpbXBvcnQgc3RkLnJhbmRvbTsKCQkJQ29ubmVjdGlvblRocmVhZDJbMTZdIHBvb2w7CgkJCWZvcmVhY2gocmVmIHA7IHBvb2wpIHsKCQkJCSBwID0gbmV3IENvbm5lY3Rpb25UaHJlYWQyKGhhbmRsZXIpOwoJCQkJIHAuc3RhcnQoKTsKCQkJfQoKCQkJd2hpbGUodHJ1ZSkgewoJCQkJYXV0byBjb25uZWN0aW9uID0gbGlzdGVuZXIuYWNjZXB0KCk7CgoJCQkJYm9vbCBoYW5kbGVkID0gZmFsc2U7CgkJCQlyZXRyeToKCQkJCWZvcmVhY2gocDsgcG9vbCkKCQkJCQlpZihwLmF2YWlsYWJsZSkgewoJCQkJCQloYW5kbGVkID0gdHJ1ZTsKCQkJCQkJc2VuZChwLnRpZCwgY2FzdChzaXplX3QpIGNhc3Qodm9pZCopIGNvbm5lY3Rpb24pOwoJCQkJCQlicmVhazsKCQkJCQl9CgoJCQkJLy8gbm9uZSBhdmFpbGFibGUgcmlnaHQgbm93LCBtYWtlIGl0IHdhaXQgYSBiaXQgdGhlbiB0cnkgYWdhaW4KCQkJCWlmKCFoYW5kbGVkKSB7CgkJCQkJVGhyZWFkLnNsZWVwKGR1ciEibXNlY3MiKDI1KSk7CgkJCQkJZ290byByZXRyeTsKCQkJCX0KCQkJfQoJCX0gZWxzZSB7CgkJCWZvcmVhY2goY29ubmVjdGlvbjsgdGhpcykKCQkJCWhhbmRsZXIoY29ubmVjdGlvbik7CgkJCQkKCQl9Cgl9CgoJdGhpcyhzdHJpbmcgaG9zdCwgdXNob3J0IHBvcnQsIHZvaWQgZnVuY3Rpb24oU29ja2V0KSBoYW5kbGVyKSB7CgkJdGhpcy5oYW5kbGVyID0gaGFuZGxlcjsKCQlsaXN0ZW5lciA9IG5ldyBUY3BTb2NrZXQoKTsKCQlsaXN0ZW5lci5zZXRPcHRpb24oU29ja2V0T3B0aW9uTGV2ZWwuU09DS0VULCBTb2NrZXRPcHRpb24uUkVVU0VBRERSLCB0cnVlKTsKCQlsaXN0ZW5lci5iaW5kKGhvc3QubGVuZ3RoID8gcGFyc2VBZGRyZXNzKGhvc3QsIHBvcnQpIDogbmV3IEludGVybmV0QWRkcmVzcyhwb3J0KSk7CgkJbGlzdGVuZXIubGlzdGVuKDEyOCk7Cgl9CgoJU29ja2V0IGxpc3RlbmVyOwoJdm9pZCBmdW5jdGlvbihTb2NrZXQpIGhhbmRsZXI7CgoJYm9vbCBydW5uaW5nOwoJdm9pZCBxdWl0KCkgewoJCXJ1bm5pbmcgPSBmYWxzZTsKCX0KCglpbnQgb3BBcHBseShzY29wZSBDTVQgZGcpIHsKCQlydW5uaW5nID0gdHJ1ZTsKCQlzaGFyZWQoaW50KSBsb29wQnJva2VuOwoKCQl3aGlsZSghbG9vcEJyb2tlbiAmJiBydW5uaW5nKSB7CgkJCWF1dG8gc24gPSBsaXN0ZW5lci5hY2NlcHQoKTsKCQkJdHJ5IHsKCQkJCXZlcnNpb24oY2dpX25vX3RocmVhZHMpIHsKCQkJCQkvLyBORVZFUiBVU0UgVEhJUwoJCQkJCS8vIGl0IGV4aXN0cyBvbmx5IGZvciBkZWJ1Z2dpbmcgYW5kIG90aGVyIHNwZWNpYWwgb2NjYXNpb25zCgoJCQkJCS8vIHRoZSB0aHJlYWQgbW9kZSBpcyBmYXN0ZXIgYW5kIGxlc3MgbGlrZWx5IHRvIHN0YWxsIHRoZSB3aG9sZQoJCQkJCS8vIHRoaW5nIHdoZW4gYSByZXF1ZXN0IGlzIHNsb3cKCQkJCQlkZyhzbik7CgkJCQl9IGVsc2UgewoJCQkJCS8qCgkJCQkJdmVyc2lvbihjZ2lfbXVsdGlwbGVfY29ubmVjdGlvbnNfcGVyX3RocmVhZCkgewoJCQkJCQlib29sIGZvdW5kT25lID0gZmFsc2U7CgkJCQkJCXRyeUFnYWluOgoJCQkJCQlmb3JlYWNoKHQ7IHBvb2wpCgkJCQkJCQlpZih0LnMgaXMgbnVsbCkgewoJCQkJCQkJCXQucyA9IHNuOwoJCQkJCQkJCWZvdW5kT25lID0gdHJ1ZTsKCQkJCQkJCQlicmVhazsKCQkJCQkJCX0KCQkJCQkJVGhyZWFkLnNsZWVwKGR1ciEibXNlY3MiKDEpKTsKCQkJCQkJaWYoIWZvdW5kT25lKQoJCQkJCQkJZ290byB0cnlBZ2FpbjsKCQkJCQl9IGVsc2UgewoJCQkJCSovCgkJCQkJCWF1dG8gdGhyZWFkID0gbmV3IENvbm5lY3Rpb25UaHJlYWQoc24sICZsb29wQnJva2VuLCBkZyk7CgkJCQkJCXRocmVhZC5zdGFydCgpOwoJCQkJCS8vfQoJCQkJfQoJCQkJLy8gbG9vcEJyb2tlbiA9IGRnKHNuKTsKCQkJfSBjYXRjaChFeGNlcHRpb24gZSkgewoJCQkJLy8gaWYgYSBjb25uZWN0aW9uIGdvZXMgd3JvbmcsIHdlIHdhbnQgdG8ganVzdCBzYXkgbm8sIGJ1dCB0cnkgdG8gY2Fycnkgb24gdW5sZXNzIGl0IGlzIGFuIEVycm9yIG9mIHNvbWUgc29ydCAoaW4gd2hpY2ggY2FzZSwgd2UnbGwgZGllLiBZb3UgbWlnaHQgd2FudCBhbiBleHRlcm5hbCBoZWxwZXIgcHJvZ3JhbSB0byByZXZpdmUgdGhlIHNlcnZlciB3aGVuIGl0IGRpZXMpCgkJCQlzbi5jbG9zZSgpOwoJCQl9CgkJfQoKCQlyZXR1cm4gbG9vcEJyb2tlbjsKCX0KfQoKLy8gaGVscGVyIGZ1bmN0aW9uIHRvIHNlbmQgYSBsb3QgdG8gYSBzb2NrZXQuIFNpbmNlIHRoaXMgYmxvY2tzIGZvciB0aGUgYnVmZmVyIChwb3NzaWJseSBzZXZlcmFsIHRpbWVzKSwgeW91IHNob3VsZCBwcm9iYWJseSBjYWxsIGl0IGluIGEgc2VwYXJhdGUgdGhyZWFkIG9yIHNvbWV0aGluZy4Kdm9pZCBzZW5kQWxsKFNvY2tldCBzLCBjb25zdCh2b2lkKVtdIGRhdGEsIHN0cmluZyBmaWxlID0gX19GSUxFX18sIHNpemVfdCBsaW5lID0gX19MSU5FX18pIHsKCWlmKGRhdGEubGVuZ3RoID09IDApIHJldHVybjsKCXB0cmRpZmZfdCBhbW91bnQ7CglkbyB7CgkJYW1vdW50ID0gcy5zZW5kKGRhdGEpOwoJCWlmKGFtb3VudCA9PSBTb2NrZXQuRVJST1IpCgkJCXRocm93IG5ldyBDb25uZWN0aW9uRXhjZXB0aW9uKHMsIGxhc3RTb2NrZXRFcnJvciwgZmlsZSwgbGluZSk7CgkJYXNzZXJ0KGFtb3VudCA&#43;IDApOwoJCWRhdGEgPSBkYXRhW2Ftb3VudCAuLiAkXTsKCX0gd2hpbGUoZGF0YS5sZW5ndGgpOwp9CgpjbGFzcyBDb25uZWN0aW9uRXhjZXB0aW9uIDogRXhjZXB0aW9uIHsKCVNvY2tldCBzb2NrZXQ7Cgl0aGlzKFNvY2tldCBzLCBzdHJpbmcgbXNnLCBzdHJpbmcgZmlsZSA9IF9fRklMRV9fLCBzaXplX3QgbGluZSA9IF9fTElORV9fKSB7CgkJdGhpcy5zb2NrZXQgPSBzOwoJCXN1cGVyKG1zZywgZmlsZSwgbGluZSk7Cgl9Cn0KCmFsaWFzIGludCBkZWxlZ2F0ZShTb2NrZXQpIENNVDsKCmltcG9ydCBjb3JlLnRocmVhZDsKY2xhc3MgQ29ubmVjdGlvblRocmVhZCA6IFRocmVhZCB7Cgl0aGlzKFNvY2tldCBzLCBzaGFyZWQoaW50KSogYnJlYWtTaWduaWZpZXIsIENNVCBkZykgewoJCXRoaXMucyA9IHM7CgkgCXRoaXMuYnJlYWtTaWduaWZpZXIgPSBicmVha1NpZ25pZmllcjsKCQl0aGlzLmRnID0gZGc7CgkJc3VwZXIoJnJ1bkFsbCk7Cgl9CgoJdm9pZCBydW5BbGwoKSB7CgkJaWYocyAhaXMgbnVsbCkKCQkJcnVuKCk7CgkJLyoKCQl2ZXJzaW9uKGNnaV9tdWx0aXBsZV9jb25uZWN0aW9uc19wZXJfdGhyZWFkKSB7CgkJCXdoaWxlKDEpIHsKCQkJCXdoaWxlKHMgaXMgbnVsbCkKCQkJCQlzbGVlcChkdXIhIm1zZWNzIigxKSk7CgkJCQlydW4oKTsKCQkJfQoJCX0KCQkqLwoJfQoKCXZvaWQgcnVuKCkgewoJCXNjb3BlKGV4aXQpIHsKCQkJLy8gSSBkb24ndCB3YW50IHRvIGRvdWJsZSBjbG9zZSBpdCwgYW5kIGl0IGRvZXMgdGhpcyBvbiBjbG9zZSgpIGFjY29yZGluZyB0byBzb3VyY2UKCQkJLy8gbWlnaHQgYmUgZnJhZ2lsZSwgYnV0IG1laAoJCQlpZihzLmhhbmRsZSgpICE9IHNvY2tldF90LmluaXQpCgkJCQlzLmNsb3NlKCk7CgkJCXMgPSBudWxsOyAvLyBzbyB3ZSBrbm93IHRoaXMgdGhyZWFkIGlzIGNsZWFyCgkJfQoJCWlmKGF1dG8gcmVzdWx0ID0gZGcocykpIHsKCQkJKmJyZWFrU2lnbmlmaWVyID0gcmVzdWx0OwoJCX0KCX0KCglTb2NrZXQgczsKCXNoYXJlZChpbnQpKiBicmVha1NpZ25pZmllcjsKCUNNVCBkZzsKfQoKLyogRG9uZSB3aXRoIG5ldHdvcmsgaGVscGVyICovCgovKiBIZWxwZXJzIGZvciBkb2luZyB0ZW1wb3JhcnkgZmlsZXMuIFVzZWQgYm90aCBoZXJlIGFuZCBpbiB3ZWIuZCAqLwoKdmVyc2lvbihXaW5kb3dzKSB7CglpbXBvcnQgY29yZS5zeXMud2luZG93cy53aW5kb3dzOwoJZXh0ZXJuKFdpbmRvd3MpIERXT1JEIEdldFRlbXBQYXRoVyhEV09SRCwgTFBXU1RSKTsKCWFsaWFzIEdldFRlbXBQYXRoVyBHZXRUZW1wUGF0aDsKfQoKdmVyc2lvbihQb3NpeCkgewoJc3RhdGljIGltcG9ydCBsaW51eCA9IGNvcmUuc3lzLnBvc2l4LnVuaXN0ZDsKfQoKc3RyaW5nIGdldFRlbXBEaXJlY3RvcnkoKSB7CglzdHJpbmcgcGF0aDsKCXZlcnNpb24oV2luZG93cykgewoJCXdjaGFyWzEwMjRdIGJ1ZmZlcjsKCQlhdXRvIGxlbiA9IEdldFRlbXBQYXRoKDEwMjQsIGJ1ZmZlci5wdHIpOwoJCWlmKGxlbiA9PSAwKQoJCQl0aHJvdyBuZXcgRXhjZXB0aW9uKCJjb3VsZG4ndCBmaW5kIGEgdGVtcG9yYXJ5IHBhdGgiKTsKCgkJYXV0byBiID0gYnVmZmVyWzAgLi4gbGVuXTsKCgkJcGF0aCA9IHRvIXN0cmluZyhiKTsKCX0gZWxzZQoJCXBhdGggPSAiL3RtcC8iOwoKCXJldHVybiBwYXRoOwp9CgoKLy8gSSBsaWtlIHN0ZC5kYXRlLiBUaGVzZSBmdW5jdGlvbnMgaGVscCBrZWVwIG15IG9sZCBjb2RlIGFuZCBkYXRhIHdvcmtpbmcgd2l0aCBwaG9ib3MgY2hhbmdpbmcuCgpsb25nIHN5c1RpbWVUb0RUaW1lKGluIFN5c1RpbWUgc3lzVGltZSkgewogICAgcmV0dXJuIGNvbnZlcnQhKCJobnNlY3MiLCAibXNlY3MiKShzeXNUaW1lLnN0ZFRpbWUgLSA2MjEzNTU5NjgwMDAwMDAwMDBMKTsKfQoKbG9uZyBkYXRlVGltZVRvRFRpbWUoaW4gRGF0ZVRpbWUgZHQpIHsKCXJldHVybiBzeXNUaW1lVG9EVGltZShjYXN0KFN5c1RpbWUpIGR0KTsKfQoKbG9uZyBnZXRVdGNUaW1lKCkgeyAvLyByZW5hbWVkIHByaW1hcmlseSB0byBhdm9pZCBjb25mbGljdCB3aXRoIHN0ZC5kYXRlIGl0c2VsZgoJcmV0dXJuIHN5c1RpbWVUb0RUaW1lKENsb2NrLmN1cnJUaW1lKFVUQygpKSk7Cn0KCi8vIE5PVEU6IG5ldyBTaW1wbGVUaW1lWm9uZShtaW51dGVzKTsgY2FuIHBlcmhhcHMgd29yayB3aXRoIHRoZSBnZXRUaW1lem9uZU9mZnNldCgpIEpTIHRyaWNrClN5c1RpbWUgZFRpbWVUb1N5c1RpbWUobG9uZyBkVGltZSwgaW1tdXRhYmxlIFRpbWVab25lIHR6ID0gbnVsbCkgewoJaW1tdXRhYmxlIGhuc2VjcyA9IGNvbnZlcnQhKCJtc2VjcyIsICJobnNlY3MiKShkVGltZSkgKyA2MjEzNTU5NjgwMDAwMDAwMDBMOwoJcmV0dXJuIFN5c1RpbWUoaG5zZWNzLCB0eik7Cn0KCgoKLy8gdGhpcyBpcyBhIGhlbHBlciB0byByZWFkIEhUVFAgdHJhbnNmZXItZW5jb2Rpbmc6IGNodW5rZWQgcmVzcG9uc2VzCmltbXV0YWJsZSh1Ynl0ZVtdKSBkZWNodW5rKEJ1ZmZlcmVkSW5wdXRSYW5nZSBpcikgewoJaW1tdXRhYmxlKHVieXRlKVtdIHJldDsKCglhbm90aGVyX2NodW5rOgoJLy8gSWYgaGVyZSwgd2UgYXJlIGF0IHRoZSBiZWdpbm5pbmcgb2YgYSBjaHVuay4KCWF1dG8gYSA9IGlyLmZyb250KCk7CglpbnQgY2h1bmtTaXplOwoJaW50IGxvYyA9IGxvY2F0aW9uT2YoYSwgIlxyXG4iKTsKCXdoaWxlKGxvYyA9PSAtMSkgewoJCWlyLnBvcEZyb250KCk7CgkJYSA9IGlyLmZyb250KCk7CgkJbG9jID0gbG9jYXRpb25PZihhLCAiXHJcbiIpOwoJfQoKCXN0cmluZyBoZXg7CgloZXggPSAiIjsKCWZvcihpbnQgaSA9IDA7IGkgPCBsb2M7IGkrKykgewoJCWNoYXIgYyA9IGFbaV07CgkJaWYoYyA&#43;PSAnQScgJiYgYyA8PSAnWicpCgkJCWMgKz0gMHgyMDsKCQlpZigoYyA&#43;PSAnMCcgJiYgYyA8PSAnOScpIHx8IChjID49ICdhJyAmJiBjIDw9ICd6JykpIHsKCQkJaGV4IH49IGM7CgkJfSBlbHNlIHsKCQkJYnJlYWs7CgkJfQoJfQoKCWFzc2VydChoZXgubGVuZ3RoKTsKCglpbnQgcG93ZXIgPSAxOwoJaW50IHNpemUgPSAwOwoJZm9yZWFjaChjYzE7IHJldHJvKGhleCkpIHsKCQlkY2hhciBjYyA9IGNjMTsKCQlpZihjYyA&#43;PSAnYScgJiYgY2MgPD0gJ3onKQoJCQljYyAtPSAweDIwOwoJCWludCB2YWwgPSAwOwoJCWlmKGNjID49ICcwJyAmJiBjYyA8PSAnOScpCgkJCXZhbCA9IGNjIC0gJzAnOwoJCWVsc2UKCQkJdmFsID0gY2MgLSAnQScgKyAxMDsKCgkJc2l6ZSArPSBwb3dlciAqIHZhbDsKCQlwb3dlciAqPSAxNjsKCX0KCgljaHVua1NpemUgPSBzaXplOwoJYXNzZXJ0KHNpemUgPj0gMCk7CgoJaWYobG9jICsgMiA&#43;IGEubGVuZ3RoKSB7CgkJaXIucG9wRnJvbnQoMCwgYS5sZW5ndGggKyBsb2MgKyAyKTsKCQlhID0gaXIuZnJvbnQoKTsKCX0KCglhID0gaXIuY29uc3VtZShsb2MgKyAyKTsKCglpZihjaHVua1NpemUgPT0gMCkgeyAvLyB3ZSdyZSBkb25lIHdpdGggdGhlIHJlc3BvbnNlCgkJLy8gaWYgd2UgZ290IGhlcmUsIHdpbGwgY2hhbmdlIG11c3QgYmUgdHJ1ZS4uLi4KCQltb3JlX2Zvb3RlcnM6CgkJbG9jID0gbG9jYXRpb25PZihhLCAiXHJcbiIpOwoJCWlmKGxvYyA9PSAtMSkgewoJCQlpci5wb3BGcm9udCgpOwoJCQlhID0gaXIuZnJvbnQ7CgkJCWdvdG8gbW9yZV9mb290ZXJzOwoJCX0gZWxzZSB7CgkJCWFzc2VydChsb2MgPT0gMCk7CgkJCWlyLmNvbnN1bWUobG9jICsgMik7CgkJCWdvdG8gZmluaXNoOwoJCX0KCX0gZWxzZSB7CgkJLy8gaWYgd2UgZ290IGhlcmUsIHdpbGwgY2hhbmdlIG11c3QgYmUgdHJ1ZS4uLi4KCQlpZihhLmxlbmd0aCA8IGNodW5rU2l6ZSArIDIpIHsKCQkJaXIucG9wRnJvbnQoMCwgY2h1bmtTaXplICsgMik7CgkJCWEgPSBpci5mcm9udCgpOwoJCX0KCgkJcmV0IH49IChhWzAuLmNodW5rU2l6ZV0pOwoKCQlpZighKGEubGVuZ3RoID4gY2h1bmtTaXplICsgMikpIHsKCQkJaXIucG9wRnJvbnQoMCwgY2h1bmtTaXplICsgMik7CgkJCWEgPSBpci5mcm9udCgpOwoJCX0KCQlhc3NlcnQoYVtjaHVua1NpemVdID09IDEzKTsKCQlhc3NlcnQoYVtjaHVua1NpemUrMV0gPT0gMTApOwoJCWEgPSBpci5jb25zdW1lKGNodW5rU2l6ZSArIDIpOwoJCWNodW5rU2l6ZSA9IDA7CgkJZ290byBhbm90aGVyX2NodW5rOwoJfQoKCWZpbmlzaDoKCXJldHVybiByZXQ7Cn0KCi8vIEkgd2FudCB0byBiZSBhYmxlIHRvIGdldCBkYXRhIGZyb20gbXVsdGlwbGUgc291cmNlcyB0aGUgc2FtZSB3YXkuLi4KaW50ZXJmYWNlIEJ5Q2h1bmtSYW5nZSB7Cglib29sIGVtcHR5KCk7Cgl2b2lkIHBvcEZyb250KCk7Cgljb25zdCh1Ynl0ZSlbXSBmcm9udCgpOwp9CgpCeUNodW5rUmFuZ2UgYnlDaHVuayhjb25zdCh1Ynl0ZSlbXSBkYXRhKSB7CglyZXR1cm4gbmV3IGNsYXNzIEJ5Q2h1bmtSYW5nZSB7CgkJb3ZlcnJpZGUgYm9vbCBlbXB0eSgpIHsKCQkJcmV0dXJuICFkYXRhLmxlbmd0aDsKCQl9CgoJCW92ZXJyaWRlIHZvaWQgcG9wRnJvbnQoKSB7CgkJCWlmKGRhdGEubGVuZ3RoID4gNDA5NikKCQkJCWRhdGEgPSBkYXRhWzQwOTYgLi4gJF07CgkJCWVsc2UKCQkJCWRhdGEgPSBudWxsOwoJCX0KCgkJb3ZlcnJpZGUgY29uc3QodWJ5dGUpW10gZnJvbnQoKSB7CgkJCXJldHVybiBkYXRhWzAgLi4gJCA&#43;IDQwOTYgPyA0MDk2IDogJF07CgkJfQoJfTsKfQoKQnlDaHVua1JhbmdlIGJ5Q2h1bmsoQnVmZmVyZWRJbnB1dFJhbmdlIGlyLCBzaXplX3QgYXRNb3N0KSB7Cgljb25zdCh1Ynl0ZSlbXSBmOwoKCWYgPSBpci5mcm9udDsKCWlmKGYubGVuZ3RoID4gYXRNb3N0KQoJCWYgPSBmWzAgLi4gYXRNb3N0XTsKCglyZXR1cm4gbmV3IGNsYXNzIEJ5Q2h1bmtSYW5nZSB7CgkJb3ZlcnJpZGUgYm9vbCBlbXB0eSgpIHsKCQkJcmV0dXJuIGF0TW9zdCA9PSAwOwoJCX0KCgkJb3ZlcnJpZGUgY29uc3QodWJ5dGUpW10gZnJvbnQoKSB7CgkJCXJldHVybiBmOwoJCX0KCgkJb3ZlcnJpZGUgdm9pZCBwb3BGcm9udCgpIHsKCQkJaXIuY29uc3VtZShmLmxlbmd0aCk7CgkJCWF0TW9zdCAtPSBmLmxlbmd0aDsKCQkJYXV0byBhID0gaXIuZnJvbnQoKTsKCgkJCWlmKGEubGVuZ3RoIDw9IGF0TW9zdCkgewoJCQkJZiA9IGE7CgkJCQlhdE1vc3QgLT0gYS5sZW5ndGg7CgkJCQlhID0gaXIuY29uc3VtZShhLmxlbmd0aCk7CgkJCQlpZihhdE1vc3QgIT0gMCkKCQkJCQlpci5wb3BGcm9udCgpOwoJCQkJaWYoZi5sZW5ndGggPT0gMCkgewoJCQkJCWYgPSBpci5mcm9udCgpOwoJCQkJfQoJCQl9IGVsc2UgewoJCQkJLy8gd2UgYWN0dWFsbHkgaGF2ZSAqbW9yZSogaGVyZSB0aGFuIHdlIG5lZWQuLi4uCgkJCQlmID0gYVswLi5hdE1vc3RdOwoJCQkJYXRNb3N0ID0gMDsKCQkJCWlyLmNvbnN1bWUoYXRNb3N0KTsKCQkJfQoJCX0KCX07Cn0KCnZlcnNpb24oY2dpX3dpdGhfd2Vic29ja2V0KSB7CgkvLyBodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM2NDU1CgoJLyoqCgkJV0VCU09DS0VUIFNVUFBPUlQ6CgoJCUZ1bGwgZXhhbXBsZToKCQktLS0KCQkJaW1wb3J0IGFyc2QuY2dpOwoKCQkJdm9pZCB3ZWJzb2NrZXRFY2hvKENnaSBjZ2kpIHsKCQkJCWlmKGNnaS53ZWJzb2NrZXRSZXF1ZXN0ZWQoKSkgewoJCQkJCWlmKGNnaS5vcmlnaW4gIT0gImh0dHA6Ly9hcnNkbmV0Lm5ldCIpCgkJCQkJCXRocm93IG5ldyBFeGNlcHRpb24oImJhZCBvcmlnaW4iKTsKCQkJCQlhdXRvIHdlYnNvY2tldCA9IGNnaS5hY2NlcHRXZWJzb2NrZXQoKTsKCgkJCQkJd2Vic29ja2V0LnNlbmQoImhlbGxvIik7CgkJCQkJd2Vic29ja2V0LnNlbmQoIiB3b3JsZCEiKTsKCgkJCQkJYXV0byBtc2cgPSB3ZWJzb2NrZXQucmVjdigpOwoJCQkJCXdoaWxlKG1zZy5vcGNvZGUgIT0gV2ViU29ja2V0T3Bjb2RlLmNsb3NlKSB7CgkJCQkJCWlmKG1zZy5vcGNvZGUgPT0gV2ViU29ja2V0T3Bjb2RlLnRleHQpIHsKCQkJCQkJCXdlYnNvY2tldC5zZW5kKG1zZy50ZXh0RGF0YSk7CgkJCQkJCX0gZWxzZSBpZihtc2cub3Bjb2RlID09IFdlYlNvY2tldE9wY29kZS5iaW5hcnkpIHsKCQkJCQkJCXdlYnNvY2tldC5zZW5kKG1zZy5kYXRhKTsKCQkJCQkJfQoKCQkJCQkJbXNnID0gd2Vic29ja2V0LnJlY3YoKTsKCQkJCQl9CgoJCQkJCXdlYnNvY2tldC5jbG9zZSgpOwoJCQkJfSBlbHNlIGFzc2VydCgwLCAiaSB3YW50IGEgd2ViIHNvY2tldCEiKTsKCQkJfQoKCQkJbWl4aW4gR2VuZXJpY01haW4hd2Vic29ja2V0RWNobzsKCQktLS0KCSovCgoJY2xhc3MgV2ViU29ja2V0IHsKCQlDZ2kgY2dpOwoKCQlwcml2YXRlIHRoaXMoQ2dpIGNnaSkgewoJCQl0aGlzLmNnaSA9IGNnaTsKCQl9CgoJCS8vIHJldHVybnMgdHJ1ZSBpZiBkYXRhIGF2YWlsYWJsZSwgZmFsc2UgaWYgaXQgdGltZWQgb3V0CgkJYm9vbCByZWN2QXZhaWxhYmxlKER1cmF0aW9uIHRpbWVvdXQgPSBkdXIhIm1zZWNzIigwKSkgewoJCQlTb2NrZXQgc29ja2V0ID0gY2dpLmlkbG9sLnNvdXJjZTsKCgkJCWF1dG8gY2hlY2sgPSBuZXcgU29ja2V0U2V0KCk7CgkJCWNoZWNrLmFkZChzb2NrZXQpOwoKCQkJYXV0byBnb3QgPSBTb2NrZXQuc2VsZWN0KGNoZWNrLCBudWxsLCBudWxsLCB0aW1lb3V0KTsKCQkJaWYoZ290ID4gMCkKCQkJCXJldHVybiB0cnVlOwoJCQlyZXR1cm4gZmFsc2U7CgkJfQoKCQkvLyBub3RlOiB0aGlzIGJsb2NrcwoJCVdlYlNvY2tldE1lc3NhZ2UgcmVjdigpIHsKCQkJLy8gRklYTUU6IHNob3VsZCB3ZSBhdXRvbWF0aWNhbGx5IGhhbmRsZSBwaW5ncyBhbmQgcG9uZ3M/CgkJCWFzc2VydCghY2dpLmlkbG9sLmVtcHR5KCkpOwoJCQljZ2kuaWRsb2wucG9wRnJvbnQoMCk7CgoJCQlXZWJTb2NrZXRNZXNzYWdlIG1lc3NhZ2U7CgoJCQlhdXRvIGluZm8gPSBjZ2kuaWRsb2wuZnJvbnQoKTsKCgkJCS8vIEZJWE1FOiByZWFkIHNob3VsZCBwcm9sbHkgdGFrZSB0aGUgd2hvbGUgcmFuZ2Ugc28gaXQgY2FuIHJlcXVlc3QgbW9yZSBpZiBuZWVkZWQKCQkJLy8gcmVhZCBzaG91bGQgYWxzbyBnbyBhaGVhZCBhbmQgY29uc3VtZSB0aGUgcmFuZ2UKCQkJbWVzc2FnZSA9IFdlYlNvY2tldE1lc3NhZ2UucmVhZChpbmZvKTsKCgkJCWNnaS5pZGxvbC5jb25zdW1lKGluZm8ubGVuZ3RoKTsKCgkJCXJldHVybiBtZXNzYWdlOwoJCX0KCgkJdm9pZCBzZW5kKGluIGNoYXJbXSB0ZXh0KSB7CgkJCS8vIEkgY2FzdCBhd2F5IGNvbnN0IGhlcmUgYmVjYXVzZSBJIGtub3cgdGhpcyBtc2cgaXMgcHJpdmF0ZSBhbmQgaXQgZG9lc24ndCB3cml0ZQoJCQkvLyB0byB0aGF0IGJ1ZmZlciB1bmxlc3MgbWFza2luZyBpcyBzZXQuLi4gd2hpY2ggaXQgaXNuJ3QsIHNvIHdlJ3JlIG9rLgoJCQlhdXRvIG1zZyA9IFdlYlNvY2tldE1lc3NhZ2Uuc2ltcGxlTWVzc2FnZShXZWJTb2NrZXRPcGNvZGUudGV4dCwgY2FzdCh2b2lkW10pIHRleHQpOwoJCQltc2cuc2VuZChjZ2kpOwoJCX0KCgkJdm9pZCBzZW5kKGluIHVieXRlW10gYmluYXJ5KSB7CgkJCS8vIEkgY2FzdCBhd2F5IGNvbnN0IGhlcmUgYmVjYXVzZSBJIGtub3cgdGhpcyBtc2cgaXMgcHJpdmF0ZSBhbmQgaXQgZG9lc24ndCB3cml0ZQoJCQkvLyB0byB0aGF0IGJ1ZmZlciB1bmxlc3MgbWFza2luZyBpcyBzZXQuLi4gd2hpY2ggaXQgaXNuJ3QsIHNvIHdlJ3JlIG9rLgoJCQlhdXRvIG1zZyA9IFdlYlNvY2tldE1lc3NhZ2Uuc2ltcGxlTWVzc2FnZShXZWJTb2NrZXRPcGNvZGUuYmluYXJ5LCBjYXN0KHZvaWRbXSkgYmluYXJ5KTsKCQkJbXNnLnNlbmQoY2dpKTsKCQl9CgoJCXZvaWQgY2xvc2UoKSB7CgkJCWF1dG8gbXNnID0gV2ViU29ja2V0TWVzc2FnZS5zaW1wbGVNZXNzYWdlKFdlYlNvY2tldE9wY29kZS5jbG9zZSwgbnVsbCk7CgkJCW1zZy5zZW5kKGNnaSk7CgkJfQoKCQl2b2lkIHBpbmcoKSB7CgkJCWF1dG8gbXNnID0gV2ViU29ja2V0TWVzc2FnZS5zaW1wbGVNZXNzYWdlKFdlYlNvY2tldE9wY29kZS5waW5nLCBudWxsKTsKCQkJbXNnLnNlbmQoY2dpKTsKCQl9CgoJCXZvaWQgcG9uZygpIHsKCQkJYXV0byBtc2cgPSBXZWJTb2NrZXRNZXNzYWdlLnNpbXBsZU1lc3NhZ2UoV2ViU29ja2V0T3Bjb2RlLnBvbmcsIG51bGwpOwoJCQltc2cuc2VuZChjZ2kpOwoJCX0KCX0KCglib29sIHdlYnNvY2tldFJlcXVlc3RlZChDZ2kgY2dpKSB7CgkJcmV0dXJuCgkJCSJzZWMtd2Vic29ja2V0LWtleSIgaW4gY2dpLnJlcXVlc3RIZWFkZXJzCgkJCSYmCgkJCSJjb25uZWN0aW9uIiBpbiBjZ2kucmVxdWVzdEhlYWRlcnMgJiYKCQkJCWNnaS5yZXF1ZXN0SGVhZGVyc1siY29ubmVjdGlvbiJdLnRvTG93ZXIoKS5pbmRleE9mKCJ1cGdyYWRlIikgIT0gLTEKCQkJJiYKCQkJInVwZ3JhZGUiIGluIGNnaS5yZXF1ZXN0SGVhZGVycyAmJgoJCQkJY2dpLnJlcXVlc3RIZWFkZXJzWyJ1cGdyYWRlIl0udG9Mb3dlcigpID09ICJ3ZWJzb2NrZXQiCgkJCTsKCX0KCglXZWJTb2NrZXQgYWNjZXB0V2Vic29ja2V0KENnaSBjZ2kpIHsKCQlhc3NlcnQoIWNnaS5jbG9zZWQpOwoJCWFzc2VydCghY2dpLm91dHB1dHRlZFJlc3BvbnNlRGF0YSk7CgkJY2dpLnNldFJlc3BvbnNlU3RhdHVzKCIxMDEgV2ViIFNvY2tldCBQcm90b2NvbCBIYW5kc2hha2UiKTsKCQljZ2kuaGVhZGVyKCJVcGdyYWRlOiBXZWJTb2NrZXQiKTsKCQljZ2kuaGVhZGVyKCJDb25uZWN0aW9uOiB1cGdyYWRlIik7CgoJCXN0cmluZyBrZXkgPSBjZ2kucmVxdWVzdEhlYWRlcnNbInNlYy13ZWJzb2NrZXQta2V5Il07CgkJa2V5IH49ICIyNThFQUZBNS1FOTE0LTQ3REEtOTVDQS1DNUFCMERDODVCMTEiOwoKCQlpbXBvcnQgYXJzZC5zaGE7CgkJYXV0byBhY2NlcHQgPSBCYXNlNjQuZW5jb2RlKFNIQTEoa2V5KSk7CgoJCWNnaS5oZWFkZXIoKCJTZWMtV2ViU29ja2V0LUFjY2VwdDogIiB&#43;IGFjY2VwdCkuaWR1cCk7CgoJCWNnaS53ZWJzb2NrZXRNb2RlID0gdHJ1ZTsKCQljZ2kud3JpdGUoIiIpOwoKCQljZ2kuZmx1c2goKTsKCgkJcmV0dXJuIG5ldyBXZWJTb2NrZXQoY2dpKTsKCX0KCgkvLyBGSVhNRTogaW1wbGVtZW50IHdlYnNvY2tldCBleHRlbnNpb24gZnJhbWVzCgkvLyBnZXQgd2Vic29ja2V0IHRvIHdvcmsgb24gb3RoZXIgbW9kZXMsIG5vdCBqdXN0IGVtYmVkZGVkX2h0dHBkCgoJZW51bSBXZWJTb2NrZXRPcGNvZGUgOiB1Ynl0ZSB7CgkJdGV4dCA9IDEsCgkJYmluYXJ5ID0gMiwKCQkvLyAzLCA0LCA1LCA2LCA3IFJFU0VSVkVECgkJY2xvc2UgPSA4LAoJCXBpbmcgPSA5LAoJCXBvbmcgPSAxMCwKCQkvLyAxMSwxMiwxMywxNCwxNSBSRVNFUlZFRAoJfQoKCXN0cnVjdCBXZWJTb2NrZXRNZXNzYWdlIHsKCQlib29sIGZpbjsKCQlib29sIHJzdjE7CgkJYm9vbCByc3YyOwoJCWJvb2wgcnN2MzsKCQlXZWJTb2NrZXRPcGNvZGUgb3Bjb2RlOyAvLyA0IGJpdHMKCQlib29sIG1hc2tlZDsKCQl1Ynl0ZSBsZW5ndGhJbmRpY2F0b3I7IC8vIGRvbid0IHNldCB0aGlzIHdoZW4gYnVpbGRpbmcgb25lIHRvIHNlbmQKCQl1bG9uZyByZWFsTGVuZ3RoOyAvLyBkb24ndCB1c2Ugd2hlbiBzZW5kaW5nCgkJdWJ5dGVbNF0gbWFza2luZ0tleTsgLy8gZG9uJ3Qgc2V0IHRoaXMgd2hlbiBzZW5kaW5nCgkJdWJ5dGVbXSBkYXRhOwoKCQlzdGF0aWMgV2ViU29ja2V0TWVzc2FnZSBzaW1wbGVNZXNzYWdlKFdlYlNvY2tldE9wY29kZSBvcGNvZGUsIHZvaWRbXSBkYXRhKSB7CgkJCVdlYlNvY2tldE1lc3NhZ2UgbXNnOwoJCQltc2cuZmluID0gdHJ1ZTsKCQkJbXNnLm9wY29kZSA9IG9wY29kZTsKCQkJbXNnLmRhdGEgPSBjYXN0KHVieXRlW10pIGRhdGE7CgoJCQlyZXR1cm4gbXNnOwoJCX0KCgkJcHJpdmF0ZSB2b2lkIHNlbmQoQ2dpIGNnaSkgewoJCQl1Ynl0ZVs2NF0gaGVhZGVyU2NyYXRjaDsKCQkJaW50IGhlYWRlclNjcmF0Y2hQb3MgPSAwOwoKCQkJcmVhbExlbmd0aCA9IGRhdGEubGVuZ3RoOwoKCQkJewoJCQkJdWJ5dGUgYjE7CgkJCQliMSB8PSBjYXN0KHVieXRlKSBvcGNvZGU7CgkJCQliMSB8PSByc3YzID8gKDEgPDwgNCkgOiAwOwoJCQkJYjEgfD0gcnN2MiA/ICgxIDw8IDUpIDogMDsKCQkJCWIxIHw9IHJzdjEgPyAoMSA8PCA2KSA6IDA7CgkJCQliMSB8PSBmaW4gID8gKDEgPDwgNykgOiAwOwoKCQkJCWhlYWRlclNjcmF0Y2hbMF0gPSBiMTsKCQkJCWhlYWRlclNjcmF0Y2hQb3MrKzsKCQkJfQoKCQkJewoJCQkJaGVhZGVyU2NyYXRjaFBvcysrOyAvLyB3ZSdsbCBzZXQgaGVhZGVyWzFdIGF0IHRoZSBlbmQgb2YgdGhpcwoJCQkJYXV0byBybGMgPSByZWFsTGVuZ3RoOwoJCQkJdWJ5dGUgYjI7CgkJCQliMiB8PSBtYXNrZWQgPyAoMSA8PCA3KSA6IDA7CgoJCQkJYXNzZXJ0KGhlYWRlclNjcmF0Y2hQb3MgPT0gMik7CgoJCQkJaWYocmVhbExlbmd0aCA&#43;IDY1NTM1KSB7CgkJCQkJLy8gdXNlIDY0IGJpdCBsZW5ndGgKCQkJCQliMiB8PSAweDdmOwoKCQkJCQkvLyBGSVhNRTogZG91YmxlIGNoZWNrIGVuZGluYW5lc3MKCQkJCQlmb3JlYWNoKGk7IDAgLi4gOCkgewoJCQkJCQloZWFkZXJTY3JhdGNoWzIgKyA3IC0gaV0gPSBybGMgJiAweDBmZjsKCQkJCQkJcmxjID4&#43;Pj0gODsKCQkJCQl9CgoJCQkJCWhlYWRlclNjcmF0Y2hQb3MgKz0gODsKCQkJCX0gZWxzZSBpZihyZWFsTGVuZ3RoID4gMTI3KSB7CgkJCQkJLy8gdXNlIDE2IGJpdCBsZW5ndGgKCQkJCQliMiB8PSAweDdlOwoKCQkJCQkvLyBGSVhNRTogZG91YmxlIGNoZWNrIGVuZGluYW5lc3MKCQkJCQlmb3JlYWNoKGk7IDAgLi4gMikgewoJCQkJCQloZWFkZXJTY3JhdGNoWzIgKyAxIC0gaV0gPSBybGMgJiAweDBmZjsKCQkJCQkJcmxjID4&#43;Pj0gODsKCQkJCQl9CgoJCQkJCWhlYWRlclNjcmF0Y2hQb3MgKz0gMjsKCQkJCX0gZWxzZSB7CgkJCQkJLy8gdXNlIDcgYml0IGxlbmd0aAoJCQkJCWIyIHw9IHJlYWxMZW5ndGggJiAwYl8wMTExXzExMTE7CgkJCQl9CgoJCQkJaGVhZGVyU2NyYXRjaFsxXSA9IGIyOwoJCQl9CgoJCQlhc3NlcnQoIW1hc2tlZCwgIm1hc2tpbmcga2V5IG5vdCBwcm9wZXJseSBpbXBsZW1lbnRlZCIpOwoJCQlpZihtYXNrZWQpIHsKCQkJCS8vIEZJWE1FOiByYW5kb21pemUgdGhpcwoJCQkJaGVhZGVyU2NyYXRjaFtoZWFkZXJTY3JhdGNoUG9zIC4uIGhlYWRlclNjcmF0Y2hQb3MgKyA0XSA9IG1hc2tpbmdLZXlbXTsKCQkJCWhlYWRlclNjcmF0Y2hQb3MgKz0gNDsKCgkJCQkvLyB3ZSdsbCBqdXN0IG1hc2sgaXQgaW4gcGxhY2UuLi4KCQkJCWludCBrZXlJZHggPSAwOwoJCQkJZm9yZWFjaChpOyAwIC4uIGRhdGEubGVuZ3RoKSB7CgkJCQkJZGF0YVtpXSA9IGRhdGFbaV0gXiBtYXNraW5nS2V5W2tleUlkeF07CgkJCQkJaWYoa2V5SWR4ID09IDMpCgkJCQkJCWtleUlkeCA9IDA7CgkJCQkJZWxzZQoJCQkJCQlrZXlJZHgrKzsKCQkJCX0KCQkJfQoKCQkJLy93cml0ZWxuKCJTRU5ESU5HICIsIGhlYWRlclNjcmF0Y2hbMCAuLiBoZWFkZXJTY3JhdGNoUG9zXSwgZGF0YSk7CgkJCWNnaS53cml0ZShoZWFkZXJTY3JhdGNoWzAgLi4gaGVhZGVyU2NyYXRjaFBvc10pOwoJCQljZ2kud3JpdGUoZGF0YSk7CgkJCWNnaS5mbHVzaCgpOwoJCX0KCgkJc3RhdGljIFdlYlNvY2tldE1lc3NhZ2UgcmVhZCh1Ynl0ZVtdIGQpIHsKCQkJV2ViU29ja2V0TWVzc2FnZSBtc2c7CgkJCWFzc2VydChkLmxlbmd0aCA&#43;PSAyKTsKCgkJCXVieXRlIGIgPSBkWzBdOwoKCQkJbXNnLm9wY29kZSA9IGNhc3QoV2ViU29ja2V0T3Bjb2RlKSAoYiAmIDB4MGYpOwoJCQliID4&#43;PSA0OwoJCQltc2cucnN2MyA9IGIgJiAweDAxOwoJCQliID4&#43;PSAxOwoJCQltc2cucnN2MiA9IGIgJiAweDAxOwoJCQliID4&#43;PSAxOwoJCQltc2cucnN2MSA9IGIgJiAweDAxOwoJCQliID4&#43;PSAxOwoJCQltc2cuZmluID0gYiAmIDB4MDE7CgoJCQliID0gZFsxXTsKCQkJbXNnLm1hc2tlZCA9IChiICYgMGIxMDAwXzAwMDApID8gdHJ1ZSA6IGZhbHNlOwoJCQltc2cubGVuZ3RoSW5kaWNhdG9yID0gYiAmIDBiMDExMV8xMTExOwoKCQkJZCA9IGRbMiAuLiAkXTsKCgkJCWlmKG1zZy5sZW5ndGhJbmRpY2F0b3IgPT0gMHg3ZSkgewoJCQkJLy8gMTYgYml0IGxlbmd0aAoJCQkJbXNnLnJlYWxMZW5ndGggPSAwOwoKCQkJCWZvcmVhY2goaTsgMCAuLiAyKSB7CgkJCQkJbXNnLnJlYWxMZW5ndGggfD0gZFswXSA8PCAoKDEtaSkgKiA4KTsKCQkJCQlkID0gZFsxIC4uICRdOwoJCQkJfQoJCQl9IGVsc2UgaWYobXNnLmxlbmd0aEluZGljYXRvciA9PSAweDdmKSB7CgkJCQkvLyA2NCBiaXQgbGVuZ3RoCgkJCQltc2cucmVhbExlbmd0aCA9IDA7CgoJCQkJZm9yZWFjaChpOyAwIC4uIDgpIHsKCQkJCQltc2cucmVhbExlbmd0aCB8PSBkWzBdIDw8ICgoNy1pKSAqIDgpOwoJCQkJCWQgPSBkWzEgLi4gJF07CgkJCQl9CgkJCX0gZWxzZSB7CgkJCQkvLyA3IGJpdCBsZW5ndGgKCQkJCW1zZy5yZWFsTGVuZ3RoID0gbXNnLmxlbmd0aEluZGljYXRvcjsKCQkJfQoKCQkJaWYobXNnLm1hc2tlZCkgewoJCQkJbXNnLm1hc2tpbmdLZXkgPSBkWzAgLi4gNF07CgkJCQlkID0gZFs0IC4uICRdOwoJCQl9CgoJCQltc2cuZGF0YSA9IGRbMCAuLiAkXTsKCgkJCWlmKG1zZy5tYXNrZWQpIHsKCQkJCS8vIGxldCdzIGp1c3QgdW5tYXNrIGl0IG5vdwoJCQkJaW50IGtleUlkeCA9IDA7CgkJCQlmb3JlYWNoKGk7IDAgLi4gbXNnLmRhdGEubGVuZ3RoKSB7CgkJCQkJbXNnLmRhdGFbaV0gPSBtc2cuZGF0YVtpXSBeIG1zZy5tYXNraW5nS2V5W2tleUlkeF07CgkJCQkJaWYoa2V5SWR4ID09IDMpCgkJCQkJCWtleUlkeCA9IDA7CgkJCQkJZWxzZQoJCQkJCQlrZXlJZHgrKzsKCQkJCX0KCQkJfQoKCQkJcmV0dXJuIG1zZzsKCQl9CgoJCWNoYXJbXSB0ZXh0RGF0YSgpIHsKCQkJcmV0dXJuIGNhc3QoY2hhcltdKSBkYXRhOwoJCX0KCX0KCn0KCgp2ZXJzaW9uKFdpbmRvd3MpCnsKICAgIHZlcnNpb24oQ1J1bnRpbWVfRGlnaXRhbE1hcnMpCiAgICB7CiAgICAgICAgZXh0ZXJuKEMpIGludCBzZXRtb2RlKGludCwgaW50KSBub3Rocm93IEBub2djOwogICAgfQogICAgZWxzZSB2ZXJzaW9uKENSdW50aW1lX01pY3Jvc29mdCkKICAgIHsKICAgICAgICBleHRlcm4oQykgaW50IF9zZXRtb2RlKGludCwgaW50KSBub3Rocm93IEBub2djOwogICAgICAgIGFsaWFzIHNldG1vZGUgPSBfc2V0bW9kZTsKICAgIH0KICAgIGVsc2Ugc3RhdGljIGFzc2VydCgwKTsKfQoKLyoKQ29weXJpZ2h0OiBBZGFtIEQuIFJ1cHBlLCAyMDA4IC0gMjAxNgpMaWNlbnNlOiAgIDxhIGhyZWY9Imh0dHA6Ly93d3cuYm9vc3Qub3JnL0xJQ0VOU0VfMV8wLnR4dCI&#43;Qm9vc3QgTGljZW5zZSAxLjA8L2E&#43;LgpBdXRob3JzOiBBZGFtIEQuIFJ1cHBlCgoJQ29weXJpZ2h0IEFkYW0gRC4gUnVwcGUgMjAwOCAtIDIwMTYuCkRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCb29zdCBTb2Z0d2FyZSBMaWNlbnNlLCBWZXJzaW9uIDEuMC4KICAgKFNlZSBhY2NvbXBhbnlpbmcgZmlsZSBMSUNFTlNFXzFfMC50eHQgb3IgY29weSBhdAoJaHR0cDovL3d3dy5ib29zdC5vcmcvTElDRU5TRV8xXzAudHh0KQoqLw==\&#34;")
	_ = packr.PackJSONBytes("d", "fx.d", "\&#34;aW1wb3J0IHN0ZC5qc29uOwoKbG9uZyBleGVjdXRlRngoSlNPTlZhbHVlIGlucHV0KQp7CiAgICByZXR1cm4gaW5wdXRbImEiXS5pbnRlZ2VyICsgaW5wdXRbImIiXS5pbnRlZ2VyOwp9\&#34;")
}
